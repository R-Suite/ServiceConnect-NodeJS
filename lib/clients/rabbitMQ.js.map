{"version":3,"sources":["../../src/clients/rabbitMQ.js"],"names":["Client","config","consumeMessageCallback","_consumeMessage","bind","_createQueues","consumeType","removeType","publish","send","_getHeaders","_processMessage","close","options","amqpSettings","ssl","connect","host","err","conn","emit","connection","createChannel","channel","console","info","queue","name","assertQueue","durable","exclusive","autoDelete","key","handlers","type","replace","assertExchange","bindQueue","deadLetterExchange","retryQueue","arguments","retryDelay","errorQueue","auditEnabled","auditQueue","consume","noAck","unbindQueue","endpoint","message","headers","endpoints","Array","isArray","map","messageHeaders","ep","sendToQueue","Buffer","JSON","stringify","messageId","MessageId","messageType","DestinationAddress","MessageType","SourceAddress","TimeSent","Date","toISOString","TypeName","ConsumerType","Language","rawMessage","properties","error","then","catch","ack","result","TimeReceived","DestinationMachine","hostname","parse","content","toString","undefined","retry","exception","success","TimeProcessed","retryCount","RetryCount","maxRetries","Exception","deleteQueue"],"mappings":"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","file":"rabbitMQ.js","sourcesContent":["import {mergeDeep, guid} from '../utils';\nimport amqp from 'amqplib/callback_api';\nimport os from 'os';\nimport EventEmitter from 'events';\n\n/** Class representing the rabbitMQ client. */\nexport default class Client extends EventEmitter {\n\n    /**\n     * Sets config and connects to RabbitMQ\n     * @constructor\n     * @param  {Object} config\n     * @param (Function) consumeMessageCallback\n     */\n    constructor(config, consumeMessageCallback) {\n        super();\n        this.config = config;\n        this.consumeMessageCallback = consumeMessageCallback;\n        this._consumeMessage = this._consumeMessage.bind(this);\n        this._createQueues = this._createQueues.bind(this);\n        this.consumeType = this.consumeType.bind(this);\n        this.removeType = this.removeType.bind(this);\n        this.publish = this.publish.bind(this);\n        this.send = this.send.bind(this);\n        this._getHeaders = this._getHeaders.bind(this);\n        this._processMessage = this._processMessage.bind(this);\n        this.close = this.close.bind(this);\n    }\n\n    /**\n     *\n     * Creates connection, creates channel and then sets up RabbitMQ queues and exchanges.\n     */\n    connect(){\n        var options = {};\n        if (this.config.amqpSettings.ssl) {\n            options = mergeDeep(options, this.config.amqpSettings.ssl);\n        }\n\n        amqp.connect(this.config.amqpSettings.host, options, (err, conn) => {\n            if (err){\n                this.emit(\"error\", err);\n                return;\n            }\n            this.connection = conn;\n            this.connection.createChannel((err, channel) => {\n                if (err){\n                    this.emit(\"error\", err);\n                    return;\n                }\n                this.channel = channel;\n                this._createQueues();\n            })\n        });\n    }\n\n    /**\n     * Creates host queue, retry queue and error queue.  It then sets up handler mappings and begins consuming messages.\n     * The connected event is fired after consuming has begun.\n     */\n    _createQueues(){\n        console.info(\"Connection ready\");\n        console.info(\"Creating queue \" + this.config.amqpSettings.queue.name);\n\n        // create queue\n        this.channel.assertQueue(this.config.amqpSettings.queue.name,  {\n            durable: this.config.amqpSettings.queue.durable,\n            exclusive: this.config.amqpSettings.queue.exclusive,\n            autoDelete: this.config.amqpSettings.queue.autoDelete\n        });\n        console.info(this.config.amqpSettings.queue.name + \" queue created.\");\n\n        // bind queue to message types\n        for(var key in this.config.handlers){\n            let type = key.replace(/\\./g, \"\");\n\n            this.channel.assertExchange(type, 'fanout', {\n                durable: true\n            });\n\n            this.channel.bindQueue(this.config.amqpSettings.queue.name, type, '');\n\n            console.info(\"Bound \" + this.config.amqpSettings.queue.name + \" to exchange \" + key);\n        }\n\n        // Create dead letter exchange\n        let deadLetterExchange = this.config.amqpSettings.queue.name + \".Retries.DeadLetter\";\n        this.channel.assertExchange(deadLetterExchange, 'fanout', {\n            durable: true\n        });\n\n        // Create retry queue\n        let retryQueue = this.config.amqpSettings.queue.name + \".Retries\";\n        console.info(\"Creating queue \" + retryQueue);\n        this.channel.assertQueue(retryQueue,  {\n            durable: this.config.amqpSettings.queue.durable,\n            arguments: {\n                \"x-dead-letter-exchange\": deadLetterExchange,\n                \"x-message-ttl\": this.config.amqpSettings.retryDelay\n            }\n        });\n\n        console.info(retryQueue + \" queue created.\");\n        this.channel.bindQueue(this.config.amqpSettings.queue.name, deadLetterExchange, '');\n\n        // configure error exchange\n        this.channel.assertExchange(this.config.amqpSettings.errorQueue, 'direct', {\n            durable: false\n        });\n\n        // create error queue\n        console.info(\"Creating queue \" + this.config.amqpSettings.errorQueue);\n        this.channel.assertQueue(this.config.amqpSettings.errorQueue,  {\n            durable: true,\n            autoDelete: false\n        });\n\n        console.info(this.config.amqpSettings.errorQueue + \" queue created.\");\n\n        if (this.config.amqpSettings.auditEnabled)\n        {\n            // configure audit exchange\n            this.channel.assertExchange(this.config.amqpSettings.auditQueue, 'direct', {\n                durable: false\n            });\n\n            // create error audit\n            console.info(\"Creating queue \" + this.config.amqpSettings.auditQueue);\n            this.channel.assertQueue(this.config.amqpSettings.auditQueue,  {\n                durable: true,\n                autoDelete: false\n            });\n        }\n\n        this.channel.consume(this.config.amqpSettings.queue.name, this._consumeMessage, {\n            noAck: this.config.amqpSettings.queue.noAck\n        });\n\n        this.emit(\"connected\");\n    }\n\n    /**\n     * Starts consuming the message type.  Creates a durable exchange named @message of type fanout.\n     * Binds the clients queue to the exchange.\n     * @param {string} type\n     */\n    consumeType(type){\n        this.channel.assertExchange(type, 'fanout', {\n            durable: true\n        });\n        this.channel.bindQueue(this.config.amqpSettings.queue.name, type, '');\n    }\n\n    /**\n     * Stops listening for the message.  Unbinds the exchange named @type from the client queue.\n     * @param {String} type\n     */\n    removeType(type){\n        this.channel.unbindQueue(this.config.amqpSettings.queue.name, type);\n    }\n\n    /**\n     * Sends a command to the specified endpoint(s).\n     * @param {String|Array} endpoint\n     * @param  {String} type\n     * @param  {Object} message\n     * @param  {Object|undefined} headers\n     */\n    send(endpoint, type, message, headers = {}) {\n        let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\n        endpoints.map(ep => {\n            let messageHeaders = this._getHeaders(type, headers, ep, \"Send\");\n            this.channel.sendToQueue(ep, new Buffer(JSON.stringify(message), \"utf-8\"), { headers: messageHeaders, messageId: messageHeaders.MessageId });\n        });\n    }\n\n    /**\n     * Published an event of the specified type.\n     * @param  {String} type\n     * @param  {Object} message\n     * @param  {Object|undefined} headers\n     */\n    publish(type, message, headers = {}){\n        let messageHeaders = this._getHeaders(type, headers, this.config.amqpSettings.queue.name, \"Publish\");\n        this.channel.assertExchange(type.replace(/\\./g, \"\"), 'fanout', {\n            durable: true\n        });\n        this.channel.publish(type.replace(/\\./g, \"\"), '', new Buffer(JSON.stringify(message), \"utf-8\"), { headers: messageHeaders, messageId: messageHeaders.MessageId });\n    }\n\n    /**\n     * Creates a object containing the standard message headers that need to be sent with all messages.\n     * @param  {String} type\n     * @param  {Object} headers\n     * @param  {String} queue\n     * @param  {String} messageType\n     * @return  {Object} headers\n     */\n    _getHeaders(type, headers, queue, messageType){\n        headers = mergeDeep({}, headers || {});\n        if (!headers.DestinationAddress) headers.DestinationAddress = queue;\n        if (!headers.MessageId) headers.MessageId = guid();\n        if (!headers.MessageType) headers.MessageType = messageType;\n        if (!headers.SourceAddress) headers.SourceAddress = this.config.amqpSettings.queue.name;\n        if (!headers.TimeSent) headers.TimeSent = new Date().toISOString();\n        if (!headers.TypeName) headers.TypeName = type;\n        if (!headers.ConsumerType) headers.ConsumerType = 'RabbitMQ';\n        if (!headers.Language) headers.Language = 'Javascript';\n        return headers;\n    }\n\n    /**\n     * Callback called by RabbitMQ when consuming a message.  Calls the consumeMessage callback passed into the client\n     * constructor.  If there is an exception the message is sent to the retry queue.  If an exception occurs and the\n     * message has been retried the max number of times then the message is sent to the error queue.  If auditing is\n     * enabled a copy of the message is sent to the audit queue. Acks the message at the end if noAck is false.\n     * @param  {Object} rawMessage\n     */\n    _consumeMessage(rawMessage){\n        if (!rawMessage.properties.headers.TypeName){\n            this.emit(\"error\", { error: \"Message does not contain TypeName\", message: rawMessage});\n            throw {\n                error: \"Message does not contain TypeName\",\n                message: rawMessage\n            }\n        }\n\n        this._processMessage(rawMessage)\n          .then(() => {})\n          .catch(() => {})\n          .then(() => {\n            if(!this.config.amqpSettings.queue.noAck){\n                this.channel.ack(rawMessage);\n            }\n          });\n    }\n\n    /**\n     * Processes the RabbitMQ message.  Calls the consumeMessage callback passed into the client\n     * constructor.  If there is an exception the message is sent to the retry queue.  If an exception occurs and the\n     * message has been retried the max number of times then the message is sent to the error queue.  If auditing is\n     * enabled a copy of the message is sent to the audit queue.\n     * @param  {Object} rawMessage\n     */\n    async _processMessage(rawMessage) {\n        let result = null,\n            headers = rawMessage.properties.headers;\n\n        try {\n\n            headers.TimeReceived = headers.TimeReceived || new Date().toISOString();\n            headers.DestinationMachine = headers.DestinationMachine || os.hostname();\n            headers.DestinationAddress = headers.DestinationAddress || this.config.amqpSettings.queue.name;\n\n            let message = JSON.parse(rawMessage.content.toString());\n\n            try {\n              await this.consumeMessageCallback(\n                  message,\n                  headers,\n                  headers.TypeName);\n            } catch (e) {\n              if (e === null || e === undefined ||\n                  (e !== null && e != undefined && typeof e !== 'object')  ||\n                  (e !== null && e != undefined && typeof e === 'object' && e.retry !== false)) {\n                result = {\n                    exception: e,\n                    success: false\n                };\n              }\n            }\n\n            headers.TimeProcessed = headers.TimeProcessed || new Date().toISOString();\n\n            // forward to audit queue is audit is enabled\n            if(result === null && this.config.amqpSettings.auditEnabled) {\n                this.channel.sendToQueue(\n                    this.config.amqpSettings.auditQueue,\n                    rawMessage.content,\n                    {\n                        headers: headers,\n                        messageId: rawMessage.properties.messageId\n                    });\n            }\n\n        } catch(ex) {\n            result = {\n                exception: ex,\n                success: false\n            };\n        }\n\n        if(result !== null) {\n            let retryCount = 0;\n            if(headers.RetryCount !== undefined){\n                retryCount = headers.RetryCount;\n            }\n\n            if (retryCount < this.config.amqpSettings.maxRetries){\n                retryCount++;\n                headers.RetryCount = retryCount;\n                this.channel.sendToQueue(\n                    this.config.amqpSettings.queue.name + \".Retries\",\n                    rawMessage.content,\n                    {\n                        headers: headers,\n                        messageId: rawMessage.properties.messageId\n                    });\n            } else {\n                headers.Exception = result.exception;\n                this.channel.sendToQueue(\n                    this.config.amqpSettings.errorQueue,\n                    rawMessage.content,\n                    {\n                        headers: headers,\n                        messageId: rawMessage.properties.messageId\n                    });\n            }\n        }\n    }\n\n    /**\n     * Closes RabbitMQ channel.\n     */\n    close(){\n        if(this.config.amqpSettings.queue.autoDelete){\n            this.channel.deleteQueue(this.config.amqpSettings.queue.name + \".Retries\");\n        }\n        this.channel.close();\n    }\n}\n"]}