{"version":3,"sources":["../src/index.js"],"names":["Bus","config","id","init","bind","_consumeMessage","addHandler","removeHandler","send","publish","_processHandlers","isHandled","on","console","log","requestReplyCallbacks","cb","client","emit","ex","connect","message","callback","type","replace","consumeType","handlers","push","filter","c","undefined","length","removeType","endpoint","headers","messageId","endpoints","Array","isArray","endpointCount","processedCount","expected","timeout","setTimeout","clearTimeout","Promise","resolve","then","_processFilters","filters","before","catch","_messageErrorHandler","err","p","_logFilterError","e","all","_processRequestReplies","after","i","result","breakError","reject","retry","exception","promises","replyCallback","_getReplyCallback","map","h","promise","configuration","close"],"mappings":"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","file":"index.js","sourcesContent":["import settings from './settings';\r\nimport {mergeDeep, guid} from './utils';\r\nimport EventEmitter from 'events';\r\n\r\n/** Class representing a the message bus. */\r\nexport class Bus extends EventEmitter {\r\n\r\n    /**\r\n     * Sets config and creates client\r\n     * @constructor\r\n     * @param {Object} config\r\n     */\r\n    constructor(config) {\r\n        super();\r\n        this.id = guid();\r\n        this.config = mergeDeep(settings(), config);\r\n        this.init = this.init.bind(this);\r\n        this._consumeMessage = this._consumeMessage.bind(this);\r\n        this.addHandler = this.addHandler.bind(this);\r\n        this.removeHandler = this.removeHandler.bind(this);\r\n        this.send = this.send.bind(this);\r\n        this.publish = this.publish.bind(this);\r\n        this._processHandlers = this._processHandlers.bind(this);\r\n        this.isHandled = this.isHandled.bind(this);\r\n        this.on('error', console.log);\r\n        this.requestReplyCallbacks = {};\r\n    }\r\n\r\n    /**\r\n     * Creates AMQP client and fires connected event when client has connected\r\n     */\r\n    init(cb) {\r\n        this.client = new this.config.client(this.config, this._consumeMessage);\r\n        this.client.on(\"error\", ex => this.emit(\"error\", ex));\r\n        this.client.connect();\r\n        this.client.on(\"connected\", () => {\r\n            this.emit(\"connected\");\r\n            if(cb) cb();\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Starts consuming the message type and binds the callback to the message type.\r\n     * @param {String} message\r\n     * @param  {Function} callback\r\n     */\r\n    addHandler(message, callback){\r\n        var type = message.replace(/\\./g, \"\");\r\n        if(type !== \"*\"){\r\n            this.client.consumeType(type);\r\n        }\r\n        this.config.handlers[message] = this.config.handlers[message] || [];\r\n        this.config.handlers[message].push(callback);\r\n    }\r\n\r\n    /**\r\n     * Removes the message type callback binding and stops listening for the message if there are no more callback\r\n     * bindings.\r\n     * @param {String} message\r\n     * @param  {Function} callback\r\n     */\r\n    removeHandler(message, callback){\r\n        if (this.config.handlers[message]){\r\n            this.config.handlers[message] = this.config\r\n                .handlers[message]\r\n                .filter(c => c !== callback);\r\n\r\n            if (message !== \"*\" && (this.config.handlers[message] === undefined ||\r\n                                    this.config.handlers[message].length === 0)){\r\n                this.client.removeType(message.replace(/\\./g, \"\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the message type is being handled by the Bus.\r\n     * @param {String} message\r\n     * @return {Boolean}\r\n     */\r\n    isHandled(message) {\r\n        return this.config.handlers[message] !== undefined && this.config.handlers[message].length !== 0;\r\n    }\r\n\r\n    /**\r\n     * Sends a command to the specified endpoint(s).\r\n     * @param {String|Array} endpoint\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    send(endpoint, type, message, headers = {}){\r\n        this.client.send(endpoint, type, message, headers);\r\n    }\r\n\r\n    /**\r\n     * Published an event of the specified type.\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    publish(type, message, headers = {}){\r\n        this.client.publish(type, message, headers);\r\n    }\r\n\r\n    /**\r\n     * Sends a command to the specified endpoint(s) and waits for one or more replies.\r\n     * The method behaves like a regular blocking RPC method.\r\n     * @param {string|Array} endpoint\r\n     * @param {string} type\r\n     * @param {Object} message\r\n     * @param {function} callback\r\n     * @param {Object|undefined} headers\r\n     */\r\n    sendRequest(endpoint, type, message, callback, headers ={}){\r\n        var messageId = guid();\r\n\r\n        let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\r\n\r\n        this.requestReplyCallbacks[messageId] = {\r\n            endpointCount: endpoints.length,\r\n            processedCount: 0,\r\n            callback\r\n        };\r\n        headers[\"RequestMessageId\"] = messageId;\r\n        this.client.send(endpoint, type, message, headers);\r\n    }\r\n\r\n    /**\r\n     * Publishes an event and wait for replies.\r\n     * @param {string} type\r\n     * @param {Object} message\r\n     * @param {function} callback\r\n     * @param {int|null} expected\r\n     * @param {int|null} timeout\r\n     * @param {Object|null} headers\r\n     */\r\n    publishRequest(type, message, callback, expected = null, timeout = 10000, headers = {}){\r\n        var messageId = guid();\r\n\r\n        this.requestReplyCallbacks[messageId] = {\r\n            endpointCount: expected === null ? -1 : expected,\r\n            processedCount: 0,\r\n            callback\r\n        };\r\n        headers[\"RequestMessageId\"] = messageId;\r\n\r\n        this.client.publish(type, message, headers);\r\n\r\n        if (timeout !== null) {\r\n            this.requestReplyCallbacks[messageId].timeout = setTimeout(() => {\r\n                if (this.requestReplyCallbacks[messageId]){\r\n                    clearTimeout(this.requestReplyCallbacks[messageId].timeout);\r\n                    delete this.requestReplyCallbacks[messageId];\r\n                }\r\n            }, timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback called when consuming a message.  Calls handler callbacks.\r\n     * @param  {Object} message\r\n     * @param  {Object} headers\r\n     * @param  {string} type\r\n     * @return {Object} result\r\n     */\r\n     _consumeMessage(message, headers, type){\r\n\r\n        return Promise.resolve()\r\n            .then(() => this._processFilters(\r\n                this.config.filters.before,\r\n                message,\r\n                headers,\r\n                type\r\n            ))\r\n            .catch(err => this._messageErrorHandler(err))\r\n            .then(p => { if(!p) throw \"Before filter returned false\"; })\r\n            .catch(e => this._logFilterError(e))\r\n            .then(() => Promise.all([\r\n              ...this._processHandlers(message, headers, type),\r\n              this._processRequestReplies(message, headers, type)\r\n            ]))\r\n            .catch(err => this._messageErrorHandler(err))\r\n            .then(() => this._processFilters(\r\n                this.config.filters.after,\r\n                message,\r\n                headers,\r\n                type\r\n            ))\r\n            .catch(err => this._messageErrorHandler(err))\r\n            .then(p => { if(!p) throw \"Asfter filter returned false\" })\r\n            .catch(e => this._logFilterError(e));\r\n    }\r\n\r\n    async _processFilters(filters, message, headers, type) {\r\n        for (var i = 0; i < filters.length; i++) {\r\n          let result = await filters[i](message, headers, type, this);\r\n          if (result === false) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _messageErrorHandler(e) {\r\n      if (e!== null && typeof e === 'object' && e.breakError === true) {\r\n          return Promise.reject(e);\r\n      }\r\n      this.emit(\"error\", e);\r\n      return Promise.reject({\r\n        breakError: true,\r\n        retry: true,\r\n        exception: e\r\n      });\r\n    }\r\n\r\n    _logFilterError(e) {\r\n      if (e!== null && typeof e === 'object' && e.breakError === true) {\r\n          return Promise.reject(e);\r\n      }\r\n      console.log(e);\r\n      return Promise.reject({\r\n        breakError: true,\r\n        retry: false,\r\n        exception: e\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Finds all handlers interested in the message type and calls handler callback function.\r\n     * @param  {Object} message\r\n     * @param  {Object} headers\r\n     * @param  {string} type\r\n     */\r\n    _processHandlers(message, headers, type) {\r\n        let handlers = this.config.handlers[type] || [],\r\n            promises = [];\r\n\r\n        if (this.config.handlers[\"*\"] !== undefined && this.config.handlers[\"*\"] !== null){\r\n            handlers = [...handlers, ...this.config.handlers[\"*\"]];\r\n        }\r\n\r\n        if (handlers.length > 0){\r\n            var replyCallback = this._getReplyCallback(headers);\r\n            promises = handlers.map(h => h(message, headers, type, replyCallback));\r\n        }\r\n\r\n        return promises;\r\n    }\r\n\r\n    /**\r\n     * Finds the callback passed to sendRequest or publishRequest and calls it.\r\n     * @param  {Object} message\r\n     * @param  {Object} headers\r\n     * @param  {Object} type\r\n     */\r\n     _processRequestReplies(message, headers, type) {\r\n        let promise = null;\r\n        if (headers[\"ResponseMessageId\"]){\r\n            let configuration = this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\r\n            if (configuration){\r\n                promise = configuration.callback(message, type, headers);\r\n                configuration.processedCount++;\r\n                if (configuration.processedCount >= configuration.endpointCount){\r\n                    if (this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout){\r\n                        clearTimeout(this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout);\r\n                    }\r\n                    delete this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\r\n                }\r\n            }\r\n        }\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Returns a reply function to be used by handlers.  The reply function will set the ResponseMessageId in the\r\n     * headers and send the reply back to the source address.\r\n     * @param {Object} headers\r\n     * @return {function(*=, *=)}\r\n     * @private\r\n     */\r\n    _getReplyCallback(headers) {\r\n        return (type, message) => {\r\n            headers[\"ResponseMessageId\"] = headers[\"RequestMessageId\"];\r\n            this.send(headers[\"SourceAddress\"], type, message, headers);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of Bus resources.\r\n     */\r\n    close(){\r\n        this.client.close();\r\n    }\r\n}\r\n"]}