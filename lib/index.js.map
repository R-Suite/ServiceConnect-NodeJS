{"version":3,"sources":["../src/index.js"],"names":["Bus","config","initialized","id","init","bind","_consumeMessage","addHandler","removeHandler","send","publish","_processHandlers","isHandled","on","console","log","requestReplyCallbacks","Promise","resolve","reject","client","emit","ex","connect","message","callback","type","replace","consumeType","handlers","push","filter","c","undefined","length","removeType","endpoint","headers","_processFilters","filters","outgoing","result","sentCallback","messageId","endpoints","Array","isArray","endpointCount","processedCount","expected","timeout","errorCallback","setTimeout","clearTimeout","before","process","all","_processRequestReplies","after","i","promises","replyCallback","_getReplyCallback","map","h","promise","configuration","close"],"mappings":"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","file":"index.js","sourcesContent":["import settings from './settings';\nimport {mergeDeep, guid} from './utils';\nimport EventEmitter from 'events';\n\n/** Class representing a the message bus. */\nexport class Bus extends EventEmitter {\n\n  initialized = false;\n\n  /**\n   * Sets config and creates client\n   * @constructor\n   * @param {Object} config\n   */\n  constructor(config) {\n    super();\n    this.id = guid();\n    this.config = mergeDeep(settings(), config);\n    this.init = this.init.bind(this);\n    this._consumeMessage = this._consumeMessage.bind(this);\n    this.addHandler = this.addHandler.bind(this);\n    this.removeHandler = this.removeHandler.bind(this);\n    this.send = this.send.bind(this);\n    this.publish = this.publish.bind(this);\n    this._processHandlers = this._processHandlers.bind(this);\n    this.isHandled = this.isHandled.bind(this);\n    this.on('error', console.log);\n    this.requestReplyCallbacks = {};\n  }\n\n  /**\n   * Creates AMQP client and fires connected event when client has connected\n   */\n  init() {\n    return new Promise((resolve, reject) => {\n      this.client = new this.config.client(this.config, this._consumeMessage);\n      this.client.on(\"error\", ex => this.emit(\"error\", ex));\n      this.client.connect();\n      this.client.on(\"connected\", () => {\n        if (!this.initialized) {\n          this.initialized = true;\n          this.emit(\"connected\");\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Starts consuming the message type and binds the callback to the message type.\n   * @param {String} message\n   * @param  {Function} callback\n   */\n  addHandler(message, callback){\n    var type = message.replace(/\\./g, \"\");\n    if(type !== \"*\"){\n      this.client.consumeType(type);\n    }\n    this.config.handlers[message] = this.config.handlers[message] || [];\n    this.config.handlers[message].push(callback);\n  }\n\n  /**\n   * Removes the message type callback binding and stops listening for the message if there are no more callback\n   * bindings.\n   * @param {String} message\n   * @param  {Function} callback\n   */\n  removeHandler(message, callback){\n    if (this.config.handlers[message]){\n      this.config.handlers[message] = this.config\n        .handlers[message]\n        .filter(c => c !== callback);\n\n      if (message !== \"*\" && (this.config.handlers[message] === undefined ||\n                  this.config.handlers[message].length === 0)){\n        this.client.removeType(message.replace(/\\./g, \"\"));\n      }\n    }\n  }\n\n  /**\n   * Checks if the message type is being handled by the Bus.\n   * @param {String} message\n   * @return {Boolean}\n   */\n  isHandled(message) {\n    return this.config.handlers[message] !== undefined && this.config.handlers[message].length !== 0;\n  }\n\n  /**\n   * Sends a command to the specified endpoint(s).\n   * @param {String|Array} endpoint\n   * @param  {String} type\n   * @param  {Object} message\n   * @param  {Object|undefined} headers\n   */\n  async send(endpoint, type, message, headers = {}) {\n    let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\n    if (!result) {\n      return;\n    }\n    return this.client.send(endpoint, type, message, headers);\n  }\n\n  /**\n   * Published an event of the specified type.\n   * @param  {String} type\n   * @param  {Object} message\n   * @param  {Object|undefined} headers\n   */\n  async publish(type, message, headers = {}, sentCallback){\n    let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\n    if (!result) {\n      return;\n    }\n    return this.client.publish(type, message, headers);\n  }\n\n  /**\n   * Sends a command to the specified endpoint(s) and waits for one or more replies.\n   * The method behaves like a regular blocking RPC method.\n   * @param {string|Array} endpoint\n   * @param {string} type\n   * @param {Object} message\n   * @param {function} callback\n   * @param {Object|undefined} headers\n   */\n  async sendRequest(endpoint, type, message, callback, headers ={}){\n    var messageId = guid();\n\n    let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\n\n    let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\n\n    if (!result) {\n      return;\n    }\n\n    this.requestReplyCallbacks[messageId] = {\n      endpointCount: endpoints.length,\n      processedCount: 0,\n      callback\n    };\n    headers[\"RequestMessageId\"] = messageId;\n    return this.client.send(endpoint, type, message, headers);\n  }\n\n  /**\n   * Publishes an event and wait for replies.\n   * @param {string} type\n   * @param {Object} message\n   * @param {function} callback\n   * @param {int|null} expected\n   * @param {int|null} timeout\n   * @param {Object|null} headers\n   */\n  async publishRequest(type, message, callback, expected = null, timeout = 10000, headers = {}, sentCallback, errorCallback){\n    var messageId = guid();\n\n    let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\n\n    if (!result) {\n      return;\n    }\n\n    this.requestReplyCallbacks[messageId] = {\n      endpointCount: expected === null ? -1 : expected,\n      processedCount: 0,\n      callback\n    };\n    headers[\"RequestMessageId\"] = messageId;\n\n    if (timeout !== null) {\n      this.requestReplyCallbacks[messageId].timeout = setTimeout(() => {\n        if (this.requestReplyCallbacks[messageId]){\n          clearTimeout(this.requestReplyCallbacks[messageId].timeout);\n          delete this.requestReplyCallbacks[messageId];\n        }\n      }, timeout);\n    }\n\n    return this.client.publish(type, message, headers);\n  }\n\n  /**\n   * Callback called when consuming a message.  Calls handler callbacks.\n   * @param  {Object} message\n   * @param  {Object} headers\n   * @param  {string} type\n   * @return {Object} result\n   */\n  async _consumeMessage(message, headers, type){\n    try {\n      let process = await this._processFilters(this.config.filters.before, message, headers, type);\n      if (!process) {\n        return;\n      }\n\n      await Promise.all([\n        ...this._processHandlers(message, headers, type),\n        this._processRequestReplies(message, headers, type)\n      ]);\n\n      process = await this._processFilters(this.config.filters.after, message, headers, type);\n      if (!process) {\n        return;\n      }\n    } catch (e) {\n      this.emit(\"error\", e);\n      throw e;\n    }\n  }\n\n  async _processFilters(filters, message, headers, type) {\n    for (var i = 0; i < filters.length; i++) {\n      let result = await filters[i](message, headers, type, this);\n      if (result === false) {\n      return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Finds all handlers interested in the message type and calls handler callback function.\n   * @param  {Object} message\n   * @param  {Object} headers\n   * @param  {string} type\n   */\n  _processHandlers(message, headers, type) {\n    let handlers = this.config.handlers[type] || [],\n      promises = [];\n\n    if (this.config.handlers[\"*\"] !== undefined && this.config.handlers[\"*\"] !== null){\n      handlers = [...handlers, ...this.config.handlers[\"*\"]];\n    }\n\n    if (handlers.length > 0){\n      var replyCallback = this._getReplyCallback(headers);\n      promises = handlers.map(h => h(message, headers, type, replyCallback));\n    }\n\n    return promises;\n  }\n\n  /**\n   * Finds the callback passed to sendRequest or publishRequest and calls it.\n   * @param  {Object} message\n   * @param  {Object} headers\n   * @param  {Object} type\n   */\n  _processRequestReplies(message, headers, type) {\n    let promise = null;\n    if (headers[\"ResponseMessageId\"]){\n      let configuration = this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\n      if (configuration){\n        promise = configuration.callback(message, type, headers);\n        configuration.processedCount++;\n        if (configuration.processedCount >= configuration.endpointCount){\n          if (this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout){\n            clearTimeout(this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout);\n          }\n          delete this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\n        }\n      }\n    }\n    return promise;\n  }\n\n  /**\n   * Returns a reply function to be used by handlers.  The reply function will set the ResponseMessageId in the\n   * headers and send the reply back to the source address.\n   * @param {Object} headers\n   * @return {function(*=, *=)}\n   * @private\n   */\n  _getReplyCallback(headers) {\n    return (type, message) => {\n      headers[\"ResponseMessageId\"] = headers[\"RequestMessageId\"];\n      this.send(headers[\"SourceAddress\"], type, message, headers);\n    }\n  }\n\n  /**\n   * Disposes of Bus resources.\n   */\n  close(){\n    this.client.close();\n  }\n}\n"]}