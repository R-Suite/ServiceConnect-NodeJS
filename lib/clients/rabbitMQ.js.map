{"version":3,"sources":["../../src/clients/rabbitMQ.js"],"names":["amqp","require","Client","config","consumeMessageCallback","_consumeMessage","bind","_createQueues","consumeType","removeType","publish","send","_getHeaders","_processMessage","close","options","amqpSettings","ssl","hosts","Array","isArray","host","connection","connect","connectionOptions","channel","createChannel","json","setup","prefetch","console","info","queue","name","assertQueue","durable","exclusive","autoDelete","maxPriority","key","handlers","type","replace","assertExchange","bindQueue","deadLetterExchange","retryQueue","arguments","retryDelay","errorQueue","auditEnabled","auditQueue","consume","noAck","emit","addSetup","Promise","all","removeSetup","unbindQueue","endpoint","message","headers","log","endpoints","map","messageHeaders","ep","messageId","MessageId","hasOwnProperty","priority","Priority","sendToQueue","then","messageType","DestinationAddress","MessageType","SourceAddress","TimeSent","Date","toISOString","TypeName","ConsumerType","Language","rawMessage","properties","error","catch","ack","result","TimeReceived","DestinationMachine","hostname","JSON","parse","content","toString","undefined","retry","exception","success","TimeProcessed","retryCount","RetryCount","maxRetries","Exception","deleteQueue","sleep","milliseconds","start","getTime","i"],"mappings":"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","file":"rabbitMQ.js","sourcesContent":["import {mergeDeep, guid} from '../utils';\nvar amqp = require('amqp-connection-manager');\nimport os from 'os';\nimport EventEmitter from 'events';\n\n/** Class representing the rabbitMQ client. */\nexport default class Client extends EventEmitter {\n\n    /**\n     * Sets config and connects to RabbitMQ\n     * @constructor\n     * @param  {Object} config\n     * @param (Function) consumeMessageCallback\n     */\n    constructor(config, consumeMessageCallback) {\n        super();\n        this.config = config;\n        this.consumeMessageCallback = consumeMessageCallback;\n        this._consumeMessage = this._consumeMessage.bind(this);\n        this._createQueues = this._createQueues.bind(this);\n        this.consumeType = this.consumeType.bind(this);\n        this.removeType = this.removeType.bind(this);\n        this.publish = this.publish.bind(this);\n        this.send = this.send.bind(this);\n        this._getHeaders = this._getHeaders.bind(this);\n        this._processMessage = this._processMessage.bind(this);\n        this.close = this.close.bind(this);\n    }\n\n    /**\n     *\n     * Creates connection, creates channel and then sets up RabbitMQ queues and exchanges.\n     */\n    connect(){\n        var options = {};\n        if (this.config.amqpSettings.ssl) {\n            options = mergeDeep(options, this.config.amqpSettings.ssl);\n        }\n\n        let hosts = Array.isArray(this.config.amqpSettings.host) ? this.config.amqpSettings.host : [this.config.amqpSettings.host];\n\n        this.connection = amqp.connect(hosts, { connectionOptions: options });\n        this.channel = this.connection.createChannel({\n            json: true,\n            setup: (channel) => {\n                channel.prefetch(this.config.amqpSettings.prefetch);\n                this._createQueues(channel);\n            }\n        });\n    }\n\n    /**\n     * Creates host queue, retry queue and error queue.  It then sets up handler mappings and begins consuming messages.\n     * The connected event is fired after consuming has begun.\n     */\n    _createQueues(channel){\n        console.info(\"Connection ready\");\n        console.info(\"Creating queue \" + this.config.amqpSettings.queue.name);\n\n        // create queue\n        channel.assertQueue(this.config.amqpSettings.queue.name,  {\n            durable: this.config.amqpSettings.queue.durable,\n            exclusive: this.config.amqpSettings.queue.exclusive,\n            autoDelete: this.config.amqpSettings.queue.autoDelete,\n            maxPriority: this.config.amqpSettings.queue.maxPriority\n        });\n\n        console.info(this.config.amqpSettings.queue.name + \" queue created.\");\n\n        // bind queue to message types\n        for(var key in this.config.handlers){\n            let type = key.replace(/\\./g, \"\");\n\n            channel.assertExchange(type, 'fanout', {\n                durable: true\n            });\n\n            channel.bindQueue(this.config.amqpSettings.queue.name, type, '');\n\n            console.info(\"Bound \" + this.config.amqpSettings.queue.name + \" to exchange \" + key);\n        }\n\n        // Create dead letter exchange\n        let deadLetterExchange = this.config.amqpSettings.queue.name + \".Retries.DeadLetter\";\n        channel.assertExchange(deadLetterExchange, 'fanout', {\n            durable: true\n        });\n\n        // Create retry queue\n        let retryQueue = this.config.amqpSettings.queue.name + \".Retries\";\n        console.info(\"Creating queue \" + retryQueue);\n        channel.assertQueue(retryQueue,  {\n            durable: this.config.amqpSettings.queue.durable,\n            arguments: {\n                \"x-dead-letter-exchange\": deadLetterExchange,\n                \"x-message-ttl\": this.config.amqpSettings.retryDelay\n            }\n        });\n\n        console.info(retryQueue + \" queue created.\");\n        channel.bindQueue(this.config.amqpSettings.queue.name, deadLetterExchange, '');\n\n        // configure error exchange\n        channel.assertExchange(this.config.amqpSettings.errorQueue, 'direct', {\n            durable: false\n        });\n\n        // create error queue\n        console.info(\"Creating queue \" + this.config.amqpSettings.errorQueue);\n        channel.assertQueue(this.config.amqpSettings.errorQueue,  {\n            durable: true,\n            autoDelete: false\n        });\n\n        console.info(this.config.amqpSettings.errorQueue + \" queue created.\");\n\n        if (this.config.amqpSettings.auditEnabled)\n        {\n            // configure audit exchange\n            channel.assertExchange(this.config.amqpSettings.auditQueue, 'direct', {\n                durable: false\n            });\n\n            // create error audit\n            console.info(\"Creating queue \" + this.config.amqpSettings.auditQueue);\n            channel.assertQueue(this.config.amqpSettings.auditQueue,  {\n                durable: true,\n                autoDelete: false\n            });\n        }\n\n        channel.consume(this.config.amqpSettings.queue.name, this._consumeMessage, {\n            noAck: this.config.amqpSettings.queue.noAck\n        });\n\n        this.emit(\"connected\");\n    }\n\n    /**\n     * Starts consuming the message type.  Creates a durable exchange named @message of type fanout.\n     * Binds the clients queue to the exchange.\n     * @param {string} type\n     */\n    consumeType(type){\n        this.channel.addSetup((channel) => {\n          Promise.all([\n              channel.assertExchange(type, 'fanout', { durable: true }),\n              channel.bindQueue(this.config.amqpSettings.queue.name, type, '')\n          ])\n        });\n    }\n\n    /**\n     * Stops listening for the message.  Unbinds the exchange named @type from the client queue.\n     * @param {String} type\n     */\n    removeType(type){\n      this.channel.removeSetup((channel) => {\n        return channel.unbindQueue(this.config.amqpSettings.queue.name, type);\n      });\n    }\n\n    /**\n     * Sends a command to the specified endpoint(s).\n     * @param {String|Array} endpoint\n     * @param  {String} type\n     * @param  {Object} message\n     * @param  {Object|undefined} headers\n     */\n    send(endpoint, type, message, headers = {}) {\n        console.log(\"Sending message\")\n        let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\n\n        return Promise.all(endpoints.map(ep => {\n            let messageHeaders = this._getHeaders(type, headers, ep, \"Send\");\n\n            let options = { headers: messageHeaders, messageId: messageHeaders.MessageId };\n            if (messageHeaders.hasOwnProperty(\"Priority\")) {\n                options.priority = messageHeaders.Priority\n            }\n            return this.channel.sendToQueue(ep, message, options);\n        }));\n\n    }\n\n    /**\n     * Published an event of the specified type.\n     * @param  {String} type\n     * @param  {Object} message\n     * @param  {Object|undefined} headers\n     */\n    publish(type, message, headers = {}){\n        let messageHeaders = this._getHeaders(type, headers, this.config.amqpSettings.queue.name, \"Publish\");\n\n        let options = { headers: messageHeaders, messageId: messageHeaders.MessageId };\n        if (messageHeaders.hasOwnProperty(\"Priority\")) {\n            options.priority = messageHeaders.Priority\n        }\n\n        return this.channel.addSetup((channel) => {\n            return channel.assertExchange(type.replace(/\\./g, \"\"), 'fanout', { durable: true });\n        }).then(() => {\n            return this.channel.publish(type.replace(/\\./g, \"\"), '', message, options);\n        });\n    }\n\n    /**\n     * Creates a object containing the standard message headers that need to be sent with all messages.\n     * @param  {String} type\n     * @param  {Object} headers\n     * @param  {String} queue\n     * @param  {String} messageType\n     * @return  {Object} headers\n     */\n    _getHeaders(type, headers, queue, messageType){\n        headers = mergeDeep({}, headers || {});\n        if (!headers.DestinationAddress) headers.DestinationAddress = queue;\n        if (!headers.MessageId) headers.MessageId = guid();\n        if (!headers.MessageType) headers.MessageType = messageType;\n        if (!headers.SourceAddress) headers.SourceAddress = this.config.amqpSettings.queue.name;\n        if (!headers.TimeSent) headers.TimeSent = new Date().toISOString();\n        if (!headers.TypeName) headers.TypeName = type;\n        if (!headers.ConsumerType) headers.ConsumerType = 'RabbitMQ';\n        if (!headers.Language) headers.Language = 'Javascript';\n        return headers;\n    }\n\n    /**\n     * Callback called by RabbitMQ when consuming a message.  Calls the consumeMessage callback passed into the client\n     * constructor.  If there is an exception the message is sent to the retry queue.  If an exception occurs and the\n     * message has been retried the max number of times then the message is sent to the error queue.  If auditing is\n     * enabled a copy of the message is sent to the audit queue. Acks the message at the end if noAck is false.\n     * @param  {Object} rawMessage\n     */\n    _consumeMessage(rawMessage){\n        if (!rawMessage.properties.headers.TypeName){\n            this.emit(\"error\", { error: \"Message does not contain TypeName\", message: rawMessage});\n            throw {\n                error: \"Message does not contain TypeName\",\n                message: rawMessage\n            }\n        }\n\n        this._processMessage(rawMessage)\n          .then(() => {})\n          .catch(() => {})\n          .then(() => {\n            if(!this.config.amqpSettings.queue.noAck){\n                this.channel.ack(rawMessage);\n            }\n          });\n    }\n\n    /**\n     * Processes the RabbitMQ message.  Calls the consumeMessage callback passed into the client\n     * constructor.  If there is an exception the message is sent to the retry queue.  If an exception occurs and the\n     * message has been retried the max number of times then the message is sent to the error queue.  If auditing is\n     * enabled a copy of the message is sent to the audit queue.\n     * @param  {Object} rawMessage\n     */\n    async _processMessage(rawMessage) {\n        let result = null,\n            headers = rawMessage.properties.headers;\n\n        try {\n\n            headers.TimeReceived = headers.TimeReceived || new Date().toISOString();\n            headers.DestinationMachine = headers.DestinationMachine || os.hostname();\n            headers.DestinationAddress = headers.DestinationAddress || this.config.amqpSettings.queue.name;\n\n            let message = JSON.parse(rawMessage.content.toString());\n\n            try {\n              await this.consumeMessageCallback(\n                  message,\n                  headers,\n                  headers.TypeName);\n            } catch (e) {\n              if (e === null || e === undefined ||\n                  (e !== null && e != undefined && typeof e !== 'object')  ||\n                  (e !== null && e != undefined && typeof e === 'object' && e.retry !== false)) {\n                result = {\n                    exception: e,\n                    success: false\n                };\n              }\n            }\n\n            headers.TimeProcessed = headers.TimeProcessed || new Date().toISOString();\n\n            // forward to audit queue is audit is enabled\n            if(result === null && this.config.amqpSettings.auditEnabled) {\n                this.channel.sendToQueue(\n                    this.config.amqpSettings.auditQueue,\n                    JSON.parse(rawMessage.content.toString()),\n                    {\n                        headers: headers,\n                        messageId: rawMessage.properties.messageId\n                    });\n            }\n\n        } catch(ex) {\n            result = {\n                exception: ex,\n                success: false\n            };\n        }\n\n        if(result !== null) {\n            let retryCount = 0;\n            if(headers.RetryCount !== undefined){\n                retryCount = headers.RetryCount;\n            }\n\n            if (retryCount < this.config.amqpSettings.maxRetries){\n                retryCount++;\n                headers.RetryCount = retryCount;\n\n                this.channel.sendToQueue(\n                    this.config.amqpSettings.queue.name + \".Retries\",\n                    JSON.parse(rawMessage.content.toString()),\n                    {\n                        headers: headers,\n                        messageId: rawMessage.properties.messageId\n                    });\n            } else {\n                headers.Exception = result.exception;\n                this.channel.sendToQueue(\n                    this.config.amqpSettings.errorQueue,\n                    JSON.parse(rawMessage.content.toString()),\n                    {\n                        headers: headers,\n                        messageId: rawMessage.properties.messageId\n                    });\n            }\n        }\n    }\n\n    /**\n     * Closes RabbitMQ channel.\n     */\n    close(){\n        if(this.config.amqpSettings.queue.autoDelete){\n            this.channel.removeSetup((channel) => {\n                return channel.deleteQueue(this.config.amqpSettings.queue.name + \".Retries\");\n            });\n        }\n        this.channel.close();\n    }\n}\nfunction sleep(milliseconds) {\n  var start = new Date().getTime();\n  for (var i = 0; i < 1e7; i++) {\n    if ((new Date().getTime() - start) > milliseconds){\n      break;\n    }\n  }\n}\n"]}