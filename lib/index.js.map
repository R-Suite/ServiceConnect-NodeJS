{"version":3,"sources":["../src/index.js"],"names":["Bus","config","initialized","id","init","bind","_consumeMessage","addHandler","removeHandler","send","publish","_processHandlers","isHandled","on","console","log","requestReplyCallbacks","Promise","resolve","reject","client","emit","ex","connect","message","callback","type","replace","consumeType","handlers","push","filter","c","undefined","length","removeType","endpoint","headers","_processFilters","filters","outgoing","result","messageId","endpoints","Array","isArray","endpointCount","processedCount","expected","timeout","setTimeout","clearTimeout","before","process","all","_processRequestReplies","after","i","promises","replyCallback","_getReplyCallback","map","h","promise","configuration","close"],"mappings":";;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA;IACaA,G,WAAAA,G;;;AAIX;;;;;AAKA,eAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAAA,UAPpBC,WAOoB,GAPN,KAOM;;AAElB,UAAKC,EAAL,GAAU,kBAAV;AACA,UAAKF,MAAL,GAAc,sBAAU,yBAAV,EAAsBA,MAAtB,CAAd;AACA,UAAKG,IAAL,GAAY,MAAKA,IAAL,CAAUC,IAAV,OAAZ;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,OAAvB;AACA,UAAKE,UAAL,GAAkB,MAAKA,UAAL,CAAgBF,IAAhB,OAAlB;AACA,UAAKG,aAAL,GAAqB,MAAKA,aAAL,CAAmBH,IAAnB,OAArB;AACA,UAAKI,IAAL,GAAY,MAAKA,IAAL,CAAUJ,IAAV,OAAZ;AACA,UAAKK,OAAL,GAAe,MAAKA,OAAL,CAAaL,IAAb,OAAf;AACA,UAAKM,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBN,IAAtB,OAAxB;AACA,UAAKO,SAAL,GAAiB,MAAKA,SAAL,CAAeP,IAAf,OAAjB;AACA,UAAKQ,EAAL,CAAQ,OAAR,EAAiBC,QAAQC,GAAzB;AACA,UAAKC,qBAAL,GAA6B,EAA7B;AAbkB;AAcnB;;AAED;;;;;;;;2BAIO;AAAA;;AACL,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKC,MAAL,GAAc,IAAI,OAAKnB,MAAL,CAAYmB,MAAhB,CAAuB,OAAKnB,MAA5B,EAAoC,OAAKK,eAAzC,CAAd;AACA,eAAKc,MAAL,CAAYP,EAAZ,CAAe,OAAf,EAAwB;AAAA,iBAAM,OAAKQ,IAAL,CAAU,OAAV,EAAmBC,EAAnB,CAAN;AAAA,SAAxB;AACA,eAAKF,MAAL,CAAYG,OAAZ;AACA,eAAKH,MAAL,CAAYP,EAAZ,CAAe,WAAf,EAA4B,YAAM;AAChC,cAAI,CAAC,OAAKX,WAAV,EAAuB;AACrB,mBAAKA,WAAL,GAAmB,IAAnB;AACA,mBAAKmB,IAAL,CAAU,WAAV;AACAH;AACD;AACF,SAND;AAOD,OAXM,CAAP;AAYD;;AAED;;;;;;;;+BAKWM,O,EAASC,Q,EAAS;AAC3B,UAAIC,OAAOF,QAAQG,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAX;AACA,UAAGD,SAAS,GAAZ,EAAgB;AACd,aAAKN,MAAL,CAAYQ,WAAZ,CAAwBF,IAAxB;AACD;AACD,WAAKzB,MAAL,CAAY4B,QAAZ,CAAqBL,OAArB,IAAgC,KAAKvB,MAAL,CAAY4B,QAAZ,CAAqBL,OAArB,KAAiC,EAAjE;AACA,WAAKvB,MAAL,CAAY4B,QAAZ,CAAqBL,OAArB,EAA8BM,IAA9B,CAAmCL,QAAnC;AACD;;AAED;;;;;;;;;kCAMcD,O,EAASC,Q,EAAS;AAC9B,UAAI,KAAKxB,MAAL,CAAY4B,QAAZ,CAAqBL,OAArB,CAAJ,EAAkC;AAChC,aAAKvB,MAAL,CAAY4B,QAAZ,CAAqBL,OAArB,IAAgC,KAAKvB,MAAL,CAC7B4B,QAD6B,CACpBL,OADoB,EAE7BO,MAF6B,CAEtB;AAAA,iBAAKC,MAAMP,QAAX;AAAA,SAFsB,CAAhC;;AAIA,YAAID,YAAY,GAAZ,KAAoB,KAAKvB,MAAL,CAAY4B,QAAZ,CAAqBL,OAArB,MAAkCS,SAAlC,IACZ,KAAKhC,MAAL,CAAY4B,QAAZ,CAAqBL,OAArB,EAA8BU,MAA9B,KAAyC,CADjD,CAAJ,EACwD;AACtD,eAAKd,MAAL,CAAYe,UAAZ,CAAuBX,QAAQG,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAvB;AACD;AACF;AACF;;AAED;;;;;;;;8BAKUH,O,EAAS;AACjB,aAAO,KAAKvB,MAAL,CAAY4B,QAAZ,CAAqBL,OAArB,MAAkCS,SAAlC,IAA+C,KAAKhC,MAAL,CAAY4B,QAAZ,CAAqBL,OAArB,EAA8BU,MAA9B,KAAyC,CAA/F;AACD;;AAED;;;;;;;;;;;;0FAQWE,Q,EAAUV,I,EAAMF,O;YAASa,O,uEAAU,E;;;;;;;uBACzB,KAAKC,eAAL,CAAqB,KAAKrC,MAAL,CAAYsC,OAAZ,CAAoBC,QAAzC,EAAmDhB,OAAnD,EAA4Da,OAA5D,EAAqEX,IAArE,C;;;AAAfe,sB;;oBACCA,M;;;;;;;;iDAGE,KAAKrB,MAAL,CAAYX,IAAZ,CAAiB2B,QAAjB,EAA2BV,IAA3B,EAAiCF,OAAjC,EAA0Ca,OAA1C,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;4FAOcX,I,EAAMF,O;YAASa,O,uEAAU,E;;;;;;;uBAClB,KAAKC,eAAL,CAAqB,KAAKrC,MAAL,CAAYsC,OAAZ,CAAoBC,QAAzC,EAAmDhB,OAAnD,EAA4Da,OAA5D,EAAqEX,IAArE,C;;;AAAfe,sB;;oBACCA,M;;;;;;;;kDAGE,KAAKrB,MAAL,CAAYV,OAAZ,CAAoBgB,IAApB,EAA0BF,OAA1B,EAAmCa,OAAnC,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;;4FASkBD,Q,EAAUV,I,EAAMF,O,EAASC,Q;YAAUY,O,uEAAU,E;;;;;;AACzDK,yB,GAAY,kB;AACZC,yB,GAAYC,MAAMC,OAAN,CAAcT,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,C;;uBAElC,KAAKE,eAAL,CAAqB,KAAKrC,MAAL,CAAYsC,OAAZ,CAAoBC,QAAzC,EAAmDhB,OAAnD,EAA4Da,OAA5D,EAAqEX,IAArE,C;;;AAAfe,sB;;oBAECA,M;;;;;;;;;AAIL,qBAAKzB,qBAAL,CAA2B0B,SAA3B,IAAwC;AACtCI,iCAAeH,UAAUT,MADa;AAEtCa,kCAAgB,CAFsB;AAGtCtB;AAHsC,iBAAxC;AAKAY,wBAAQ,kBAAR,IAA8BK,SAA9B;kDACO,KAAKtB,MAAL,CAAYX,IAAZ,CAAiB2B,QAAjB,EAA2BV,IAA3B,EAAiCF,OAAjC,EAA0Ca,OAA1C,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;;;4FAUqBX,I,EAAMF,O,EAASC,Q;YAAUuB,Q,uEAAW,I;;;;YAAMC,O,uEAAU,K;YAAOZ,O,uEAAU,E;;;;;;AACpFK,yB,GAAY,kB;;uBACG,KAAKJ,eAAL,CAAqB,KAAKrC,MAAL,CAAYsC,OAAZ,CAAoBC,QAAzC,EAAmDhB,OAAnD,EAA4Da,OAA5D,EAAqEX,IAArE,C;;;AAAfe,sB;;oBAECA,M;;;;;;;;;AAIL,qBAAKzB,qBAAL,CAA2B0B,SAA3B,IAAwC;AACtCI,iCAAeE,aAAa,IAAb,GAAoB,CAAC,CAArB,GAAyBA,QADF;AAEtCD,kCAAgB,CAFsB;AAGtCtB;AAHsC,iBAAxC;AAKAY,wBAAQ,kBAAR,IAA8BK,SAA9B;;AAEA,oBAAIO,YAAY,IAAhB,EAAsB;AACpB,uBAAKjC,qBAAL,CAA2B0B,SAA3B,EAAsCO,OAAtC,GAAgDC,WAAW,YAAM;AAC/D,wBAAI,OAAKlC,qBAAL,CAA2B0B,SAA3B,CAAJ,EAA0C;AACxCS,mCAAa,OAAKnC,qBAAL,CAA2B0B,SAA3B,EAAsCO,OAAnD;AACA,6BAAO,OAAKjC,qBAAL,CAA2B0B,SAA3B,CAAP;AACD;AACF,mBAL+C,EAK7CO,OAL6C,CAAhD;AAMD;;kDAEM,KAAK7B,MAAL,CAAYV,OAAZ,CAAoBgB,IAApB,EAA0BF,OAA1B,EAAmCa,OAAnC,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;4FAOsBb,O,EAASa,O,EAASX,I;;;;;;;;uBAEhB,KAAKY,eAAL,CAAqB,KAAKrC,MAAL,CAAYsC,OAAZ,CAAoBa,MAAzC,EAAiD5B,OAAjD,EAA0Da,OAA1D,EAAmEX,IAAnE,C;;;AAAhB2B,uB;;oBACCA,O;;;;;;;;;uBAICpC,QAAQqC,GAAR,8BACD,KAAK3C,gBAAL,CAAsBa,OAAtB,EAA+Ba,OAA/B,EAAwCX,IAAxC,CADC,IAEJ,KAAK6B,sBAAL,CAA4B/B,OAA5B,EAAqCa,OAArC,EAA8CX,IAA9C,CAFI,G;;;;uBAKU,KAAKY,eAAL,CAAqB,KAAKrC,MAAL,CAAYsC,OAAZ,CAAoBiB,KAAzC,EAAgDhC,OAAhD,EAAyDa,OAAzD,EAAkEX,IAAlE,C;;;AAAhB2B,uB;;oBACKA,O;;;;;;;;;;;;;;;AAIL,qBAAKhC,IAAL,CAAU,OAAV;;;;;;;;;;;;;;;;;;;;4FAKkBkB,O,EAASf,O,EAASa,O,EAASX,I;;;;;;AACtC+B,iB,GAAI,C;;;sBAAGA,IAAIlB,QAAQL,M;;;;;;uBACPK,QAAQkB,CAAR,EAAWjC,OAAX,EAAoBa,OAApB,EAA6BX,IAA7B,EAAmC,IAAnC,C;;;AAAfe,sB;;sBACAA,WAAW,K;;;;;kDACR,K;;;AAH2BgB,mB;;;;;kDAM7B,I;;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;qCAQiBjC,O,EAASa,O,EAASX,I,EAAM;AACvC,UAAIG,WAAW,KAAK5B,MAAL,CAAY4B,QAAZ,CAAqBH,IAArB,KAA8B,EAA7C;AAAA,UACEgC,WAAW,EADb;;AAGA,UAAI,KAAKzD,MAAL,CAAY4B,QAAZ,CAAqB,GAArB,MAA8BI,SAA9B,IAA2C,KAAKhC,MAAL,CAAY4B,QAAZ,CAAqB,GAArB,MAA8B,IAA7E,EAAkF;AAChFA,gDAAeA,QAAf,sBAA4B,KAAK5B,MAAL,CAAY4B,QAAZ,CAAqB,GAArB,CAA5B;AACD;;AAED,UAAIA,SAASK,MAAT,GAAkB,CAAtB,EAAwB;AACtB,YAAIyB,gBAAgB,KAAKC,iBAAL,CAAuBvB,OAAvB,CAApB;AACAqB,mBAAW7B,SAASgC,GAAT,CAAa;AAAA,iBAAKC,EAAEtC,OAAF,EAAWa,OAAX,EAAoBX,IAApB,EAA0BiC,aAA1B,CAAL;AAAA,SAAb,CAAX;AACD;;AAED,aAAOD,QAAP;AACD;;AAED;;;;;;;;;;;2CAQuBlC,O,EAASa,O,EAASX,I,EAAM;AAC7C,UAAIqC,UAAU,IAAd;AACA,UAAI1B,QAAQ,mBAAR,CAAJ,EAAiC;AAC/B,YAAI2B,gBAAgB,KAAKhD,qBAAL,CAA2BqB,QAAQ,mBAAR,CAA3B,CAApB;AACA,YAAI2B,aAAJ,EAAkB;AAChBD,oBAAUC,cAAcvC,QAAd,CAAuBD,OAAvB,EAAgCE,IAAhC,EAAsCW,OAAtC,CAAV;AACA2B,wBAAcjB,cAAd;AACA,cAAIiB,cAAcjB,cAAd,IAAgCiB,cAAclB,aAAlD,EAAgE;AAC9D,gBAAI,KAAK9B,qBAAL,CAA2BqB,QAAQ,mBAAR,CAA3B,EAAyDY,OAA7D,EAAqE;AACnEE,2BAAa,KAAKnC,qBAAL,CAA2BqB,QAAQ,mBAAR,CAA3B,EAAyDY,OAAtE;AACD;AACD,mBAAO,KAAKjC,qBAAL,CAA2BqB,QAAQ,mBAAR,CAA3B,CAAP;AACD;AACF;AACF;AACD,aAAO0B,OAAP;AACD;;AAED;;;;;;;;;;sCAOkB1B,O,EAAS;AAAA;;AACzB,aAAO,UAACX,IAAD,EAAOF,OAAP,EAAmB;AACxBa,gBAAQ,mBAAR,IAA+BA,QAAQ,kBAAR,CAA/B;AACA,eAAK5B,IAAL,CAAU4B,QAAQ,eAAR,CAAV,EAAoCX,IAApC,EAA0CF,OAA1C,EAAmDa,OAAnD;AACD,OAHD;AAID;;AAED;;;;;;4BAGO;AACL,WAAKjB,MAAL,CAAY6C,KAAZ;AACD","file":"index.js","sourcesContent":["import settings from './settings';\r\nimport {mergeDeep, guid} from './utils';\r\nimport EventEmitter from 'events';\r\n\r\n/** Class representing a the message bus. */\r\nexport class Bus extends EventEmitter {\r\n\r\n  initialized = false;\r\n\r\n  /**\r\n   * Sets config and creates client\r\n   * @constructor\r\n   * @param {Object} config\r\n   */\r\n  constructor(config) {\r\n    super();\r\n    this.id = guid();\r\n    this.config = mergeDeep(settings(), config);\r\n    this.init = this.init.bind(this);\r\n    this._consumeMessage = this._consumeMessage.bind(this);\r\n    this.addHandler = this.addHandler.bind(this);\r\n    this.removeHandler = this.removeHandler.bind(this);\r\n    this.send = this.send.bind(this);\r\n    this.publish = this.publish.bind(this);\r\n    this._processHandlers = this._processHandlers.bind(this);\r\n    this.isHandled = this.isHandled.bind(this);\r\n    this.on('error', console.log);\r\n    this.requestReplyCallbacks = {};\r\n  }\r\n\r\n  /**\r\n   * Creates AMQP client and fires connected event when client has connected\r\n   * @return {Promise}\r\n   */\r\n  init() {\r\n    return new Promise((resolve, reject) => {\r\n      this.client = new this.config.client(this.config, this._consumeMessage);\r\n      this.client.on(\"error\", ex => this.emit(\"error\", ex));\r\n      this.client.connect();\r\n      this.client.on(\"connected\", () => {\r\n        if (!this.initialized) {\r\n          this.initialized = true;\r\n          this.emit(\"connected\");\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts consuming the message type and binds the callback to the message type.\r\n   * @param {String} message\r\n   * @param  {Function} callback\r\n   */\r\n  addHandler(message, callback){\r\n    var type = message.replace(/\\./g, \"\");\r\n    if(type !== \"*\"){\r\n      this.client.consumeType(type);\r\n    }\r\n    this.config.handlers[message] = this.config.handlers[message] || [];\r\n    this.config.handlers[message].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Removes the message type callback binding and stops listening for the message if there are no more callback\r\n   * bindings.\r\n   * @param {String} message\r\n   * @param {Function} callback\r\n   */\r\n  removeHandler(message, callback){\r\n    if (this.config.handlers[message]){\r\n      this.config.handlers[message] = this.config\r\n        .handlers[message]\r\n        .filter(c => c !== callback);\r\n\r\n      if (message !== \"*\" && (this.config.handlers[message] === undefined ||\r\n                  this.config.handlers[message].length === 0)){\r\n        this.client.removeType(message.replace(/\\./g, \"\"));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the message type is being handled by the Bus.\r\n   * @param {String} message\r\n   * @return {Boolean}\r\n   */\r\n  isHandled(message) {\r\n    return this.config.handlers[message] !== undefined && this.config.handlers[message].length !== 0;\r\n  }\r\n\r\n  /**\r\n   * Sends a command to the specified endpoint(s).\r\n   * @param {String|Array} endpoint\r\n   * @param {String} type\r\n   * @param {Object} message\r\n   * @param {Object|undefined} headers\r\n   * @return {Promise}\r\n   */\r\n  async send(endpoint, type, message, headers = {}) {\r\n    let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\r\n    if (!result) {\r\n      return;\r\n    }\r\n    return this.client.send(endpoint, type, message, headers);\r\n  }\r\n\r\n  /**\r\n   * Publishes an event of the specified type.\r\n   * @param {String} type\r\n   * @param {Object} message\r\n   * @param {Object|undefined} headers\r\n   * @return {Promise}\r\n   */\r\n  async publish(type, message, headers = {}){\r\n    let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\r\n    if (!result) {\r\n      return;\r\n    }\r\n    return this.client.publish(type, message, headers);\r\n  }\r\n\r\n  /**\r\n   * Sends a command to the specified endpoint(s) and waits for one or more replies.\r\n   * The method behaves like a regular blocking RPC method.\r\n   * @param {string|Array} endpoint\r\n   * @param {string} type\r\n   * @param {Object} message\r\n   * @param {function} callback\r\n   * @param {Object|undefined} headers\r\n   */\r\n  async sendRequest(endpoint, type, message, callback, headers = {}){\r\n    let messageId = guid();\r\n    let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\r\n\r\n    let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\r\n\r\n    if (!result) {\r\n      return;\r\n    }\r\n\r\n    this.requestReplyCallbacks[messageId] = {\r\n      endpointCount: endpoints.length,\r\n      processedCount: 0,\r\n      callback\r\n    };\r\n    headers[\"RequestMessageId\"] = messageId;\r\n    return this.client.send(endpoint, type, message, headers);\r\n  }\r\n\r\n  /**\r\n   * Publishes an event and wait for replies.\r\n   * @param {string} type\r\n   * @param {Object} message\r\n   * @param {function} callback\r\n   * @param {int|null} expected\r\n   * @param {int|null} timeout\r\n   * @param {Object|null} headers\r\n   * @return {Promise}\r\n   */\r\n  async publishRequest(type, message, callback, expected = null, timeout = 10000, headers = {}){\r\n    let messageId = guid();\r\n    let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\r\n\r\n    if (!result) {\r\n      return;\r\n    }\r\n\r\n    this.requestReplyCallbacks[messageId] = {\r\n      endpointCount: expected === null ? -1 : expected,\r\n      processedCount: 0,\r\n      callback\r\n    };\r\n    headers[\"RequestMessageId\"] = messageId;\r\n\r\n    if (timeout !== null) {\r\n      this.requestReplyCallbacks[messageId].timeout = setTimeout(() => {\r\n        if (this.requestReplyCallbacks[messageId]){\r\n          clearTimeout(this.requestReplyCallbacks[messageId].timeout);\r\n          delete this.requestReplyCallbacks[messageId];\r\n        }\r\n      }, timeout);\r\n    }\r\n\r\n    return this.client.publish(type, message, headers);\r\n  }\r\n\r\n  /**\r\n   * Callback called when consuming a message.  Calls handler callbacks.\r\n   * @param  {Object} message\r\n   * @param  {Object} headers\r\n   * @param  {string} type\r\n   * @return {Promise<Object>} result\r\n   */\r\n  async _consumeMessage(message, headers, type){\r\n    try {\r\n      let process = await this._processFilters(this.config.filters.before, message, headers, type);\r\n      if (!process) {\r\n        return;\r\n      }\r\n\r\n      await Promise.all([\r\n        ...this._processHandlers(message, headers, type),\r\n        this._processRequestReplies(message, headers, type)\r\n      ]);\r\n\r\n      process = await this._processFilters(this.config.filters.after, message, headers, type);\r\n      if (!process) {\r\n        return;\r\n      }\r\n    } catch (e) {\r\n      this.emit(\"error\", e);\r\n      throw e;\r\n    } \r\n  }\r\n\r\n  async _processFilters(filters, message, headers, type) {\r\n    for (var i = 0; i < filters.length; i++) {\r\n      let result = await filters[i](message, headers, type, this);\r\n      if (result === false) {\r\n      return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Finds all handlers interested in the message type and calls handler callback function.\r\n   * @param  {Object} message\r\n   * @param  {Object} headers\r\n   * @param  {string} type\r\n   * @return {List<Promise>}\r\n   * @private\r\n   */\r\n  _processHandlers(message, headers, type) {\r\n    let handlers = this.config.handlers[type] || [],\r\n      promises = [];\r\n\r\n    if (this.config.handlers[\"*\"] !== undefined && this.config.handlers[\"*\"] !== null){\r\n      handlers = [...handlers, ...this.config.handlers[\"*\"]];\r\n    }\r\n\r\n    if (handlers.length > 0){\r\n      var replyCallback = this._getReplyCallback(headers);\r\n      promises = handlers.map(h => h(message, headers, type, replyCallback));\r\n    }\r\n\r\n    return promises;\r\n  }\r\n\r\n  /**\r\n   * Finds the callback passed to sendRequest or publishRequest and calls it.\r\n   * @param  {Object} message\r\n   * @param  {Object} headers\r\n   * @param  {Object} type\r\n   * @return {Promise}\r\n   * @private\r\n   */\r\n  _processRequestReplies(message, headers, type) {\r\n    let promise = null;\r\n    if (headers[\"ResponseMessageId\"]){\r\n      let configuration = this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\r\n      if (configuration){\r\n        promise = configuration.callback(message, type, headers);\r\n        configuration.processedCount++;\r\n        if (configuration.processedCount >= configuration.endpointCount){\r\n          if (this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout){\r\n            clearTimeout(this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout);\r\n          }\r\n          delete this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\r\n        }\r\n      }\r\n    }\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * Returns a reply function to be used by handlers.  The reply function will set the ResponseMessageId in the\r\n   * headers and send the reply back to the source address.\r\n   * @param {Object} headers\r\n   * @return {function(*=, *=)}\r\n   * @private\r\n   */\r\n  _getReplyCallback(headers) {\r\n    return (type, message) => {\r\n      headers[\"ResponseMessageId\"] = headers[\"RequestMessageId\"];\r\n      this.send(headers[\"SourceAddress\"], type, message, headers);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disposes of Bus resources.\r\n   */\r\n  close(){\r\n    this.client.close();\r\n  }\r\n}\r\n"]}