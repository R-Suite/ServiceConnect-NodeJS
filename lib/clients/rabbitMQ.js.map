{"version":3,"sources":["../../src/clients/rabbitMQ.js"],"names":["Client","config","consumeMessageCallback","_consumeMessage","bind","_createQueues","consumeType","removeType","publish","send","_getHeaders","_processMessage","close","options","amqpSettings","ssl","connect","host","err","conn","emit","connection","createChannel","channel","console","info","queue","name","prefetch","assertQueue","durable","exclusive","autoDelete","maxPriority","key","handlers","type","replace","assertExchange","bindQueue","deadLetterExchange","retryQueue","arguments","retryDelay","errorQueue","auditEnabled","auditQueue","consume","noAck","unbindQueue","endpoint","message","headers","endpoints","Array","isArray","map","messageHeaders","ep","messageId","MessageId","hasOwnProperty","priority","Priority","sendToQueue","Buffer","JSON","stringify","messageType","DestinationAddress","MessageType","SourceAddress","TimeSent","Date","toISOString","TypeName","ConsumerType","Language","rawMessage","properties","error","then","catch","ack","result","TimeReceived","DestinationMachine","hostname","parse","content","toString","undefined","retry","exception","success","TimeProcessed","retryCount","RetryCount","maxRetries","Exception","deleteQueue","sleep","milliseconds","start","getTime","i"],"mappings":"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","file":"rabbitMQ.js","sourcesContent":["import {mergeDeep, guid} from '../utils';\r\nimport amqp from 'amqplib/callback_api';\r\nimport os from 'os';\r\nimport EventEmitter from 'events';\r\n\r\n/** Class representing the rabbitMQ client. */\r\nexport default class Client extends EventEmitter {\r\n\r\n    /**\r\n     * Sets config and connects to RabbitMQ\r\n     * @constructor\r\n     * @param  {Object} config\r\n     * @param (Function) consumeMessageCallback\r\n     */\r\n    constructor(config, consumeMessageCallback) {\r\n        super();\r\n        this.config = config;\r\n        this.consumeMessageCallback = consumeMessageCallback;\r\n        this._consumeMessage = this._consumeMessage.bind(this);\r\n        this._createQueues = this._createQueues.bind(this);\r\n        this.consumeType = this.consumeType.bind(this);\r\n        this.removeType = this.removeType.bind(this);\r\n        this.publish = this.publish.bind(this);\r\n        this.send = this.send.bind(this);\r\n        this._getHeaders = this._getHeaders.bind(this);\r\n        this._processMessage = this._processMessage.bind(this);\r\n        this.close = this.close.bind(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Creates connection, creates channel and then sets up RabbitMQ queues and exchanges.\r\n     */\r\n    connect(){\r\n        var options = {};\r\n        if (this.config.amqpSettings.ssl) {\r\n            options = mergeDeep(options, this.config.amqpSettings.ssl);\r\n        }\r\n\r\n        amqp.connect(this.config.amqpSettings.host, options, (err, conn) => {\r\n            if (err){\r\n                this.emit(\"error\", err);\r\n                return;\r\n            }\r\n            this.connection = conn;\r\n            this.connection.createChannel((err, channel) => {\r\n                if (err){\r\n                    this.emit(\"error\", err);\r\n                    return;\r\n                }\r\n                this.channel = channel;\r\n                this._createQueues();\r\n            })\r\n        });        \r\n    }\r\n\r\n    /**\r\n     * Creates host queue, retry queue and error queue.  It then sets up handler mappings and begins consuming messages.\r\n     * The connected event is fired after consuming has begun.\r\n     */\r\n    _createQueues(){\r\n        console.info(\"Connection ready\");\r\n        console.info(\"Creating queue \" + this.config.amqpSettings.queue.name);\r\n\r\n        this.channel.prefetch(this.config.amqpSettings.prefetch);\r\n\r\n        // create queue\r\n        this.channel.assertQueue(this.config.amqpSettings.queue.name,  {\r\n            durable: this.config.amqpSettings.queue.durable,\r\n            exclusive: this.config.amqpSettings.queue.exclusive,\r\n            autoDelete: this.config.amqpSettings.queue.autoDelete,\r\n            maxPriority: this.config.amqpSettings.queue.maxPriority\r\n        });\r\n        console.info(this.config.amqpSettings.queue.name + \" queue created.\");\r\n\r\n        // bind queue to message types\r\n        for(var key in this.config.handlers){\r\n            let type = key.replace(/\\./g, \"\");\r\n\r\n            this.channel.assertExchange(type, 'fanout', {\r\n                durable: true\r\n            });\r\n\r\n            this.channel.bindQueue(this.config.amqpSettings.queue.name, type, '');\r\n\r\n            console.info(\"Bound \" + this.config.amqpSettings.queue.name + \" to exchange \" + key);\r\n        }\r\n\r\n        // Create dead letter exchange\r\n        let deadLetterExchange = this.config.amqpSettings.queue.name + \".Retries.DeadLetter\";\r\n        this.channel.assertExchange(deadLetterExchange, 'fanout', {\r\n            durable: true\r\n        });\r\n\r\n        // Create retry queue\r\n        let retryQueue = this.config.amqpSettings.queue.name + \".Retries\";\r\n        console.info(\"Creating queue \" + retryQueue);\r\n        this.channel.assertQueue(retryQueue,  {\r\n            durable: this.config.amqpSettings.queue.durable,\r\n            arguments: {\r\n                \"x-dead-letter-exchange\": deadLetterExchange,\r\n                \"x-message-ttl\": this.config.amqpSettings.retryDelay\r\n            }\r\n        });\r\n\r\n        console.info(retryQueue + \" queue created.\");\r\n        this.channel.bindQueue(this.config.amqpSettings.queue.name, deadLetterExchange, '');\r\n\r\n        // configure error exchange\r\n        this.channel.assertExchange(this.config.amqpSettings.errorQueue, 'direct', {\r\n            durable: false\r\n        });\r\n\r\n        // create error queue\r\n        console.info(\"Creating queue \" + this.config.amqpSettings.errorQueue);\r\n        this.channel.assertQueue(this.config.amqpSettings.errorQueue,  {\r\n            durable: true,\r\n            autoDelete: false\r\n        });\r\n\r\n        console.info(this.config.amqpSettings.errorQueue + \" queue created.\");\r\n\r\n        if (this.config.amqpSettings.auditEnabled)\r\n        {\r\n            // configure audit exchange\r\n            this.channel.assertExchange(this.config.amqpSettings.auditQueue, 'direct', {\r\n                durable: false\r\n            });\r\n\r\n            // create error audit\r\n            console.info(\"Creating queue \" + this.config.amqpSettings.auditQueue);\r\n            this.channel.assertQueue(this.config.amqpSettings.auditQueue,  {\r\n                durable: true,\r\n                autoDelete: false\r\n            });\r\n        }\r\n\r\n        this.channel.consume(this.config.amqpSettings.queue.name, this._consumeMessage, {\r\n             noAck: this.config.amqpSettings.queue.noAck\r\n        });            \r\n\r\n        this.emit(\"connected\");\r\n    }\r\n\r\n    /**\r\n     * Starts consuming the message type.  Creates a durable exchange named @message of type fanout.\r\n     * Binds the clients queue to the exchange.\r\n     * @param {string} type\r\n     */\r\n    consumeType(type){\r\n        this.channel.assertExchange(type, 'fanout', {\r\n            durable: true\r\n        });\r\n        this.channel.bindQueue(this.config.amqpSettings.queue.name, type, '');\r\n    }\r\n\r\n    /**\r\n     * Stops listening for the message.  Unbinds the exchange named @type from the client queue.\r\n     * @param {String} type\r\n     */\r\n    removeType(type){\r\n        this.channel.unbindQueue(this.config.amqpSettings.queue.name, type);\r\n    }\r\n\r\n    /**\r\n     * Sends a command to the specified endpoint(s).\r\n     * @param {String|Array} endpoint\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    send(endpoint, type, message, headers = {}) {\r\n        let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\r\n        endpoints.map(ep => {\r\n            let messageHeaders = this._getHeaders(type, headers, ep, \"Send\");\r\n            let options = { headers: messageHeaders, messageId: messageHeaders.MessageId };\r\n            if (messageHeaders.hasOwnProperty(\"Priority\")) {\r\n                options.priority = messageHeaders.Priority\r\n            }\r\n            this.channel.sendToQueue(ep, new Buffer(JSON.stringify(message), \"utf-8\"), options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Published an event of the specified type.\r\n     * @param  {String} type\r\n     * @param  {Object} message\r\n     * @param  {Object|undefined} headers\r\n     */\r\n    publish(type, message, headers = {}){\r\n        let messageHeaders = this._getHeaders(type, headers, this.config.amqpSettings.queue.name, \"Publish\");\r\n        this.channel.assertExchange(type.replace(/\\./g, \"\"), 'fanout', {\r\n            durable: true\r\n        });\r\n        let options = { headers: messageHeaders, messageId: messageHeaders.MessageId };\r\n        if (messageHeaders.hasOwnProperty(\"Priority\")) {\r\n            options.priority = messageHeaders.Priority\r\n        }\r\n        this.channel.publish(type.replace(/\\./g, \"\"), '', new Buffer(JSON.stringify(message), \"utf-8\"), options);\r\n    }\r\n\r\n    /**\r\n     * Creates a object containing the standard message headers that need to be sent with all messages.\r\n     * @param  {String} type\r\n     * @param  {Object} headers\r\n     * @param  {String} queue\r\n     * @param  {String} messageType\r\n     * @return  {Object} headers\r\n     */\r\n    _getHeaders(type, headers, queue, messageType){\r\n        headers = mergeDeep({}, headers || {});\r\n        if (!headers.DestinationAddress) headers.DestinationAddress = queue;\r\n        if (!headers.MessageId) headers.MessageId = guid();\r\n        if (!headers.MessageType) headers.MessageType = messageType;\r\n        if (!headers.SourceAddress) headers.SourceAddress = this.config.amqpSettings.queue.name;\r\n        if (!headers.TimeSent) headers.TimeSent = new Date().toISOString();\r\n        if (!headers.TypeName) headers.TypeName = type;\r\n        if (!headers.ConsumerType) headers.ConsumerType = 'RabbitMQ';\r\n        if (!headers.Language) headers.Language = 'Javascript';\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Callback called by RabbitMQ when consuming a message.  Calls the consumeMessage callback passed into the client\r\n     * constructor.  If there is an exception the message is sent to the retry queue.  If an exception occurs and the\r\n     * message has been retried the max number of times then the message is sent to the error queue.  If auditing is\r\n     * enabled a copy of the message is sent to the audit queue. Acks the message at the end if noAck is false.\r\n     * @param  {Object} rawMessage\r\n     */\r\n    _consumeMessage(rawMessage){\r\n        if (!rawMessage.properties.headers.TypeName){\r\n            this.emit(\"error\", { error: \"Message does not contain TypeName\", message: rawMessage});\r\n            throw {\r\n                error: \"Message does not contain TypeName\",\r\n                message: rawMessage\r\n            }\r\n        }\r\n\r\n        this._processMessage(rawMessage)\r\n          .then(() => {})\r\n          .catch(() => {})\r\n          .then(() => {\r\n            if(!this.config.amqpSettings.queue.noAck){\r\n                this.channel.ack(rawMessage);\r\n            }\r\n          });\r\n    }\r\n\r\n    /**\r\n     * Processes the RabbitMQ message.  Calls the consumeMessage callback passed into the client\r\n     * constructor.  If there is an exception the message is sent to the retry queue.  If an exception occurs and the\r\n     * message has been retried the max number of times then the message is sent to the error queue.  If auditing is\r\n     * enabled a copy of the message is sent to the audit queue.\r\n     * @param  {Object} rawMessage\r\n     */\r\n    async _processMessage(rawMessage) {\r\n        let result = null,\r\n            headers = rawMessage.properties.headers;\r\n\r\n        try {\r\n\r\n            headers.TimeReceived = headers.TimeReceived || new Date().toISOString();\r\n            headers.DestinationMachine = headers.DestinationMachine || os.hostname();\r\n            headers.DestinationAddress = headers.DestinationAddress || this.config.amqpSettings.queue.name;\r\n\r\n            let message = JSON.parse(rawMessage.content.toString());\r\n\r\n            try {\r\n              await this.consumeMessageCallback(\r\n                  message,\r\n                  headers,\r\n                  headers.TypeName);\r\n            } catch (e) {\r\n              if (e === null || e === undefined ||\r\n                  (e !== null && e != undefined && typeof e !== 'object')  ||\r\n                  (e !== null && e != undefined && typeof e === 'object' && e.retry !== false)) {\r\n                result = {\r\n                    exception: e,\r\n                    success: false\r\n                };\r\n              }\r\n            }\r\n\r\n            headers.TimeProcessed = headers.TimeProcessed || new Date().toISOString();\r\n\r\n            // forward to audit queue is audit is enabled\r\n            if(result === null && this.config.amqpSettings.auditEnabled) {\r\n                this.channel.sendToQueue(\r\n                    this.config.amqpSettings.auditQueue,\r\n                    rawMessage.content,\r\n                    {\r\n                        headers: headers,\r\n                        messageId: rawMessage.properties.messageId\r\n                    });\r\n            }\r\n\r\n        } catch(ex) {\r\n            result = {\r\n                exception: ex,\r\n                success: false\r\n            };\r\n        }\r\n\r\n        if(result !== null) {\r\n            let retryCount = 0;\r\n            if(headers.RetryCount !== undefined){\r\n                retryCount = headers.RetryCount;\r\n            }\r\n\r\n            if (retryCount < this.config.amqpSettings.maxRetries){\r\n                retryCount++;\r\n                headers.RetryCount = retryCount;\r\n                this.channel.sendToQueue(\r\n                    this.config.amqpSettings.queue.name + \".Retries\",\r\n                    rawMessage.content,\r\n                    {\r\n                        headers: headers,\r\n                        messageId: rawMessage.properties.messageId\r\n                    });\r\n            } else {\r\n                headers.Exception = result.exception;\r\n                this.channel.sendToQueue(\r\n                    this.config.amqpSettings.errorQueue,\r\n                    rawMessage.content,\r\n                    {\r\n                        headers: headers,\r\n                        messageId: rawMessage.properties.messageId\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes RabbitMQ channel.\r\n     */\r\n    close(){\r\n        if(this.config.amqpSettings.queue.autoDelete){\r\n            this.channel.deleteQueue(this.config.amqpSettings.queue.name + \".Retries\");\r\n        }\r\n        this.channel.close();\r\n    }\r\n}\r\nfunction sleep(milliseconds) {\r\n  var start = new Date().getTime();\r\n  for (var i = 0; i < 1e7; i++) {\r\n    if ((new Date().getTime() - start) > milliseconds){\r\n      break;\r\n    }\r\n  }\r\n}"]}