{"version":3,"sources":["../../src/clients/rabbitMQ.js"],"names":["Client","config","consumeMessageCallback","processing","_consumeMessage","bind","_createQueues","consumeType","removeType","publish","send","_getHeaders","_processMessage","close","options","amqpSettings","ssl","hosts","Array","isArray","host","connection","connect","connectionOptions","channel","createChannel","json","setup","prefetch","assertQueue","queue","name","durable","exclusive","autoDelete","maxPriority","key","handlers","type","replace","assertExchange","bindQueue","deadLetterExchange","retryQueue","arguments","retryDelay","errorQueue","auditEnabled","auditQueue","consume","noAck","emit","addSetup","Promise","all","removeSetup","unbindQueue","endpoint","message","headers","endpoints","map","messageHeaders","ep","messageId","MessageId","hasOwnProperty","priority","Priority","sendToQueue","then","messageType","DestinationAddress","MessageType","SourceAddress","TimeSent","Date","toISOString","TypeName","FullTypeName","ConsumerType","Language","rawMessage","properties","error","catch","ack","result","TimeReceived","DestinationMachine","hostname","JSON","parse","content","toString","undefined","retry","exception","success","TimeProcessed","retryCount","RetryCount","maxRetries","Exception","cancel","deleteQueue","_channel","Object","keys","consumers","wait","time","resolve","_","setTimeout","sleep","milliseconds","start","getTime","i"],"mappings":"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","file":"rabbitMQ.js","sourcesContent":["import {mergeDeep, guid} from '../utils';\nimport amqp from 'amqp-connection-manager';\nimport os from 'os';\nimport EventEmitter from 'events';\n\n/** Class representing the rabbitMQ client. */\nexport default class Client extends EventEmitter {\n\n  processing = 0;\n\n  /**\n   * Sets config and connects to RabbitMQ\n   * @constructor\n   * @param  {Object} config\n   * @param (Function) consumeMessageCallback\n   */\n  constructor(config, consumeMessageCallback) {\n    super();\n    this.config = config;\n    this.consumeMessageCallback = consumeMessageCallback;\n    this._consumeMessage = this._consumeMessage.bind(this);\n    this._createQueues = this._createQueues.bind(this);\n    this.consumeType = this.consumeType.bind(this);\n    this.removeType = this.removeType.bind(this);\n    this.publish = this.publish.bind(this);\n    this.send = this.send.bind(this);\n    this._getHeaders = this._getHeaders.bind(this);\n    this._processMessage = this._processMessage.bind(this);\n    this.close = this.close.bind(this);\n  }\n\n  /**\n   *\n   * Creates connection, creates channel and then sets up RabbitMQ queues and exchanges.\n   */\n  connect(){\n    let options = {};\n    if (this.config.amqpSettings.ssl) {\n      options = mergeDeep(options, this.config.amqpSettings.ssl);\n    }\n\n    let hosts = Array.isArray(this.config.amqpSettings.host) ? this.config.amqpSettings.host : [this.config.amqpSettings.host];\n\n    this.connection = amqp.connect(hosts, { connectionOptions: options });\n    this.channel = this.connection.createChannel({\n      json: true,\n      setup: (channel) => {\n        channel.prefetch(this.config.amqpSettings.prefetch);\n        this._createQueues(channel);\n      }\n    });\n  }\n\n  /**\n   * Creates host queue, retry queue and error queue.  It then sets up handler mappings and begins consuming messages.\n   * The connected event is fired after consuming has begun.\n   */\n  _createQueues(channel){\n    // create queue\n    channel.assertQueue(this.config.amqpSettings.queue.name,  {\n      durable: this.config.amqpSettings.queue.durable,\n      exclusive: this.config.amqpSettings.queue.exclusive,\n      autoDelete: this.config.amqpSettings.queue.autoDelete,\n      maxPriority: this.config.amqpSettings.queue.maxPriority\n    });\n\n    // bind queue to message types\n    for(var key in this.config.handlers){\n      let type = key.replace(/\\./g, \"\");\n\n      channel.assertExchange(type, 'fanout', {\n        durable: true\n      });\n\n      channel.bindQueue(this.config.amqpSettings.queue.name, type, '');\n    }\n\n    // Create dead letter exchange\n    let deadLetterExchange = this.config.amqpSettings.queue.name + \".Retries.DeadLetter\";\n    channel.assertExchange(deadLetterExchange, 'direct', {\n      durable: true\n    });\n\n    // Create retry queue\n    let retryQueue = this.config.amqpSettings.queue.name + \".Retries\";\n    channel.assertQueue(retryQueue,  {\n      durable: this.config.amqpSettings.queue.durable,\n      arguments: {\n        \"x-dead-letter-exchange\": deadLetterExchange,\n        \"x-message-ttl\": this.config.amqpSettings.retryDelay\n      }\n    });\n\n    channel.bindQueue(this.config.amqpSettings.queue.name, deadLetterExchange, retryQueue);\n\n    // configure error exchange\n    channel.assertExchange(this.config.amqpSettings.errorQueue, 'direct', {\n      durable: false\n    });\n\n    // create error queue\n    channel.assertQueue(this.config.amqpSettings.errorQueue,  {\n      durable: true,\n      autoDelete: false\n    });\n\n    if (this.config.amqpSettings.auditEnabled)\n    {\n      // configure audit exchange\n      channel.assertExchange(this.config.amqpSettings.auditQueue, 'direct', {\n        durable: false\n      });\n\n      // create error audit\n      channel.assertQueue(this.config.amqpSettings.auditQueue,  {\n        durable: true,\n        autoDelete: false\n      });\n    }\n\n    channel.consume(this.config.amqpSettings.queue.name, this._consumeMessage, {\n      noAck: this.config.amqpSettings.queue.noAck\n    });\n\n    this.emit(\"connected\");\n  }\n\n  /**\n   * Starts consuming the message type.  Creates a durable exchange named @message of type fanout.\n   * Binds the clients queue to the exchange.\n   * @param {string} type\n   */\n  consumeType(type){\n    this.channel.addSetup((channel) => {\n      Promise.all([\n        channel.assertExchange(type, 'fanout', { durable: true }),\n        channel.bindQueue(this.config.amqpSettings.queue.name, type, '')\n      ])\n    });\n  }\n\n  /**\n   * Stops listening for the message.  Unbinds the exchange named @type from the client queue.\n   * @param {String} type\n   */\n  removeType(type){\n    this.channel.removeSetup((channel) => {\n      return channel.unbindQueue(this.config.amqpSettings.queue.name, type);\n    });\n  }\n\n  /**\n   * Sends a command to the specified endpoint(s).\n   * @param {String|Array} endpoint\n   * @param {String} type\n   * @param {Object} message\n   * @param  Object|undefined} headers\n   */\n  send(endpoint, type, message, headers = {}) {\n    let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\n\n    return Promise.all(endpoints.map(ep => {\n      let messageHeaders = this._getHeaders(type, headers, ep, \"Send\");\n\n      let options = { headers: messageHeaders, messageId: messageHeaders.MessageId };\n      if (messageHeaders.hasOwnProperty(\"Priority\")) {\n        options.priority = messageHeaders.Priority\n      }\n      return this.channel.sendToQueue(ep, message, options);\n    }));\n  }\n\n  /**\n   * Published an event of the specified type.\n   * @param {String} type\n   * @param {Object} message\n   * @param {Object|undefined} headers\n   */\n  publish(type, message, headers = {}){\n    let messageHeaders = this._getHeaders(type, headers, this.config.amqpSettings.queue.name, \"Publish\");\n\n    let options = { headers: messageHeaders, messageId: messageHeaders.MessageId };\n    if (messageHeaders.hasOwnProperty(\"Priority\")) {\n      options.priority = messageHeaders.Priority\n    }\n\n    return this.channel.addSetup((channel) => {\n      return channel.assertExchange(type.replace(/\\./g, \"\"), 'fanout', { durable: true });\n    }).then(() => {\n      return this.channel.publish(type.replace(/\\./g, \"\"), '', message, options);\n    });\n  }\n\n  /**\n   * Creates a object containing the standard message headers that need to be sent with all messages.\n   * @param {String} type\n   * @param {Object} headers\n   * @param {String} queue\n   * @param {String} messageType\n   * @return {Object} headers\n   */\n  _getHeaders(type, headers, queue, messageType){\n    headers = mergeDeep({}, headers || {});\n    if (!headers.DestinationAddress) headers.DestinationAddress = queue;\n    if (!headers.MessageId) headers.MessageId = guid();\n    if (!headers.MessageType) headers.MessageType = messageType;\n    if (!headers.SourceAddress) headers.SourceAddress = this.config.amqpSettings.queue.name;\n    if (!headers.TimeSent) headers.TimeSent = new Date().toISOString();\n    if (!headers.TypeName) headers.TypeName = type;\n    if (!headers.TypeName) headers.FullTypeName = type;\n    if (!headers.ConsumerType) headers.ConsumerType = 'RabbitMQ';\n    if (!headers.Language) headers.Language = 'Javascript';\n    return headers;\n  }\n\n  /**\n   * Callback called by RabbitMQ when consuming a message.  Calls the consumeMessage callback passed into the client\n   * constructor.  If there is an exception the message is sent to the retry queue.  If an exception occurs and the\n   * message has been retried the max number of times then the message is sent to the error queue.  If auditing is\n   * enabled a copy of the message is sent to the audit queue. Acks the message at the end if noAck is false.\n   * @param  {Object} rawMessage\n   */\n  _consumeMessage(rawMessage){\n    this.processing++;\n    if (!rawMessage.properties.headers.TypeName){\n      this.emit(\"error\", { error: \"Message does not contain TypeName\", message: rawMessage});\n      throw {\n        error: \"Message does not contain TypeName\",\n        message: rawMessage\n      }\n    }\n\n    this._processMessage(rawMessage)\n      .catch(() => {})\n      .then(() => {\n        if(!this.config.amqpSettings.queue.noAck){\n          this.channel.ack(rawMessage);\n        }\n        this.processing--;\n      });\n  }\n\n  /**\n   * Processes the RabbitMQ message.  Calls the consumeMessage callback passed into the client\n   * constructor.  If there is an exception the message is sent to the retry queue.  If an exception occurs and the\n   * message has been retried the max number of times then the message is sent to the error queue.  If auditing is\n   * enabled a copy of the message is sent to the audit queue.\n   * @param  {Object} rawMessage\n   */\n  async _processMessage(rawMessage) {\n    let result = null,\n      headers = rawMessage.properties.headers;\n\n    try {\n\n      headers.TimeReceived = headers.TimeReceived || new Date().toISOString();\n      headers.DestinationMachine = headers.DestinationMachine || os.hostname();\n      headers.DestinationAddress = headers.DestinationAddress || this.config.amqpSettings.queue.name;\n\n      let message = JSON.parse(rawMessage.content.toString());\n\n      try {\n        await this.consumeMessageCallback(\n          message,\n          headers,\n          headers.TypeName);\n      } catch (e) {\n        if (e === null || e === undefined ||\n          (e !== null && e != undefined && typeof e !== 'object')  ||\n          (e !== null && e != undefined && typeof e === 'object' && e.retry !== false)) {\n        result = {\n          exception: e,\n          success: false\n        };\n        }\n      }\n\n      headers.TimeProcessed = headers.TimeProcessed || new Date().toISOString();\n\n      // forward to audit queue is audit is enabled\n      if(result === null && this.config.amqpSettings.auditEnabled) {\n        this.channel.sendToQueue(\n          this.config.amqpSettings.auditQueue,\n          JSON.parse(rawMessage.content.toString()),\n          {\n            headers: headers,\n            messageId: rawMessage.properties.messageId\n          });\n      }\n\n    } catch(ex) {\n      result = {\n        exception: ex,\n        success: false\n      };\n    }\n\n    if(result !== null) {\n      let retryCount = 0;\n      if(headers.RetryCount !== undefined){\n        retryCount = headers.RetryCount;\n      }\n\n      if (retryCount < this.config.amqpSettings.maxRetries){\n        retryCount++;\n        headers.RetryCount = retryCount;\n\n        this.channel.sendToQueue(\n          this.config.amqpSettings.queue.name + \".Retries\",\n          JSON.parse(rawMessage.content.toString()),\n          {\n            headers: headers,\n            messageId: rawMessage.properties.messageId\n          });\n      } else {\n        headers.Exception = result.exception;\n        this.channel.sendToQueue(\n          this.config.amqpSettings.errorQueue,\n          JSON.parse(rawMessage.content.toString()),\n          {\n            headers: headers,\n            messageId: rawMessage.properties.messageId\n          });\n      }\n    }\n  }\n\n  stopConsuming() {\n    this.channel.cancel();\n  }\n\n  /**\n   * Closes RabbitMQ channel.\n   */\n  async close(){\n    if(this.config.amqpSettings.queue.autoDelete){\n      this.channel.removeSetup((channel) => {\n        return channel.deleteQueue(this.config.amqpSettings.queue.name + \".Retries\");\n      });\n    }\n    // Stop consuming messages.\n    await this.channel._channel.cancel(Object.keys(this.channel._channel.consumers)[0])\n\n    // Wait until all messages have been processed.\n    while (this.processing !== 0) {\n      await wait(100)\n    }\n\n    // Close connection\n    await this.connection.close();\n  }\n}\n\nfunction wait(time) {\n  return new Promise((resolve, _) => {\n    setTimeout(() => resolve(), time);\n  });\n}\n\nfunction sleep(milliseconds) {\n  var start = new Date().getTime();\n  for (var i = 0; i < 1e7; i++) {\n    if ((new Date().getTime() - start) > milliseconds){\n      break;\n    }\n  }\n}\n"]}