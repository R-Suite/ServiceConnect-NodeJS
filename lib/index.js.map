{"version":3,"sources":["../src/index.js"],"names":["Bus","config","initialized","id","init","bind","_consumeMessage","addHandler","removeHandler","send","publish","_processHandlers","isHandled","on","console","log","requestReplyCallbacks","Promise","resolve","reject","client","emit","ex","connect","message","callback","type","replace","consumeType","handlers","push","filter","c","undefined","length","removeType","endpoint","headers","_processFilters","filters","outgoing","result","sentCallback","messageId","endpoints","Array","isArray","endpointCount","processedCount","expected","timeout","errorCallback","setTimeout","clearTimeout","then","before","catch","_messageErrorHandler","err","p","_logFilterError","e","all","_processRequestReplies","after","i","breakError","retry","exception","promises","replyCallback","_getReplyCallback","map","h","promise","configuration","close"],"mappings":"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","file":"index.js","sourcesContent":["import settings from './settings';\nimport {mergeDeep, guid} from './utils';\nimport EventEmitter from 'events';\n\n/** Class representing a the message bus. */\nexport class Bus extends EventEmitter {\n\n    initialized = false;\n\n    /**\n     * Sets config and creates client\n     * @constructor\n     * @param {Object} config\n     */\n    constructor(config) {\n        super();\n        this.id = guid();\n        this.config = mergeDeep(settings(), config);\n        this.init = this.init.bind(this);\n        this._consumeMessage = this._consumeMessage.bind(this);\n        this.addHandler = this.addHandler.bind(this);\n        this.removeHandler = this.removeHandler.bind(this);\n        this.send = this.send.bind(this);\n        this.publish = this.publish.bind(this);\n        this._processHandlers = this._processHandlers.bind(this);\n        this.isHandled = this.isHandled.bind(this);\n        this.on('error', console.log);\n        this.requestReplyCallbacks = {};\n    }\n\n    /**\n     * Creates AMQP client and fires connected event when client has connected\n     */\n    init() {\n        return new Promise((resolve, reject) => {\n            this.client = new this.config.client(this.config, this._consumeMessage);\n            this.client.on(\"error\", ex => this.emit(\"error\", ex));\n            this.client.connect();\n            this.client.on(\"connected\", () => {\n                this.emit(\"connected\");\n\n                if (!this.initialized) {\n                    resolve();\n                    this.initialized = true;\n                }\n            });\n        });\n    }\n\n    /**\n     * Starts consuming the message type and binds the callback to the message type.\n     * @param {String} message\n     * @param  {Function} callback\n     */\n    addHandler(message, callback){\n        var type = message.replace(/\\./g, \"\");\n        if(type !== \"*\"){\n            this.client.consumeType(type);\n        }\n        this.config.handlers[message] = this.config.handlers[message] || [];\n        this.config.handlers[message].push(callback);\n    }\n\n    /**\n     * Removes the message type callback binding and stops listening for the message if there are no more callback\n     * bindings.\n     * @param {String} message\n     * @param  {Function} callback\n     */\n    removeHandler(message, callback){\n        if (this.config.handlers[message]){\n            this.config.handlers[message] = this.config\n                .handlers[message]\n                .filter(c => c !== callback);\n\n            if (message !== \"*\" && (this.config.handlers[message] === undefined ||\n                                    this.config.handlers[message].length === 0)){\n                this.client.removeType(message.replace(/\\./g, \"\"));\n            }\n        }\n    }\n\n    /**\n     * Checks if the message type is being handled by the Bus.\n     * @param {String} message\n     * @return {Boolean}\n     */\n    isHandled(message) {\n        return this.config.handlers[message] !== undefined && this.config.handlers[message].length !== 0;\n    }\n\n    /**\n     * Sends a command to the specified endpoint(s).\n     * @param {String|Array} endpoint\n     * @param  {String} type\n     * @param  {Object} message\n     * @param  {Object|undefined} headers\n     */\n    async send(endpoint, type, message, headers = {}) {\n        let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\n        if (!result) {\n          return;\n        }\n        return this.client.send(endpoint, type, message, headers);\n    }\n\n    /**\n     * Published an event of the specified type.\n     * @param  {String} type\n     * @param  {Object} message\n     * @param  {Object|undefined} headers\n     */\n    async publish(type, message, headers = {}, sentCallback){\n        let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\n        if (!result) {\n          return;\n        }\n        return this.client.publish(type, message, headers);\n    }\n\n    /**\n     * Sends a command to the specified endpoint(s) and waits for one or more replies.\n     * The method behaves like a regular blocking RPC method.\n     * @param {string|Array} endpoint\n     * @param {string} type\n     * @param {Object} message\n     * @param {function} callback\n     * @param {Object|undefined} headers\n     */\n    async sendRequest(endpoint, type, message, callback, headers ={}){\n        var messageId = guid();\n\n        let endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\n\n        let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\n\n        if (!result) {\n          return;\n        }\n\n        this.requestReplyCallbacks[messageId] = {\n            endpointCount: endpoints.length,\n            processedCount: 0,\n            callback\n        };\n        headers[\"RequestMessageId\"] = messageId;\n        return this.client.send(endpoint, type, message, headers);\n    }\n\n    /**\n     * Publishes an event and wait for replies.\n     * @param {string} type\n     * @param {Object} message\n     * @param {function} callback\n     * @param {int|null} expected\n     * @param {int|null} timeout\n     * @param {Object|null} headers\n     */\n    async publishRequest(type, message, callback, expected = null, timeout = 10000, headers = {}, sentCallback, errorCallback){\n        var messageId = guid();\n\n        let result = await this._processFilters(this.config.filters.outgoing, message, headers, type);\n\n        if (!result) {\n          return;\n        }\n\n        this.requestReplyCallbacks[messageId] = {\n            endpointCount: expected === null ? -1 : expected,\n            processedCount: 0,\n            callback\n        };\n        headers[\"RequestMessageId\"] = messageId;\n\n        if (timeout !== null) {\n            this.requestReplyCallbacks[messageId].timeout = setTimeout(() => {\n                if (this.requestReplyCallbacks[messageId]){\n                    clearTimeout(this.requestReplyCallbacks[messageId].timeout);\n                    delete this.requestReplyCallbacks[messageId];\n                }\n            }, timeout);\n        }\n\n        return this.client.publish(type, message, headers);\n    }\n\n    /**\n     * Callback called when consuming a message.  Calls handler callbacks.\n     * @param  {Object} message\n     * @param  {Object} headers\n     * @param  {string} type\n     * @return {Object} result\n     */\n     _consumeMessage(message, headers, type){\n\n        return Promise.resolve()\n            .then(() => this._processFilters(\n                this.config.filters.before,\n                message,\n                headers,\n                type\n            ))\n            .catch(err => this._messageErrorHandler(err))\n            .then(p => { if(!p) throw \"Before filter returned false\"; })\n            .catch(e => this._logFilterError(e))\n            .then(() => Promise.all([\n              ...this._processHandlers(message, headers, type),\n              this._processRequestReplies(message, headers, type)\n            ]))\n            .catch(err => this._messageErrorHandler(err))\n            .then(() => this._processFilters(\n                this.config.filters.after,\n                message,\n                headers,\n                type\n            ))\n            .catch(err => this._messageErrorHandler(err))\n            .then(p => { if(!p) throw \"After filter returned false\" })\n            .catch(e => this._logFilterError(e));\n    }\n\n    async _processFilters(filters, message, headers, type) {\n        for (var i = 0; i < filters.length; i++) {\n          let result = await filters[i](message, headers, type, this);\n          if (result === false) {\n            return false;\n          }\n        }\n        return true;\n    }\n\n    _messageErrorHandler(e) {\n      if (e!== null && typeof e === 'object' && e.breakError === true) {\n          return Promise.reject(e);\n      }\n      this.emit(\"error\", e);\n      return Promise.reject({\n        breakError: true,\n        retry: true,\n        exception: e\n      });\n    }\n\n    _logFilterError(e) {\n      if (e!== null && typeof e === 'object' && e.breakError === true) {\n          return Promise.reject(e);\n      }\n      console.log(e);\n      return Promise.reject({\n        breakError: true,\n        retry: false,\n        exception: e\n      });\n    }\n\n    /**\n     * Finds all handlers interested in the message type and calls handler callback function.\n     * @param  {Object} message\n     * @param  {Object} headers\n     * @param  {string} type\n     */\n    _processHandlers(message, headers, type) {\n        let handlers = this.config.handlers[type] || [],\n            promises = [];\n\n        if (this.config.handlers[\"*\"] !== undefined && this.config.handlers[\"*\"] !== null){\n            handlers = [...handlers, ...this.config.handlers[\"*\"]];\n        }\n\n        if (handlers.length > 0){\n            var replyCallback = this._getReplyCallback(headers);\n            promises = handlers.map(h => h(message, headers, type, replyCallback));\n        }\n\n        return promises;\n    }\n\n    /**\n     * Finds the callback passed to sendRequest or publishRequest and calls it.\n     * @param  {Object} message\n     * @param  {Object} headers\n     * @param  {Object} type\n     */\n     _processRequestReplies(message, headers, type) {\n        let promise = null;\n        if (headers[\"ResponseMessageId\"]){\n            let configuration = this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\n            if (configuration){\n                promise = configuration.callback(message, type, headers);\n                configuration.processedCount++;\n                if (configuration.processedCount >= configuration.endpointCount){\n                    if (this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout){\n                        clearTimeout(this.requestReplyCallbacks[headers[\"ResponseMessageId\"]].timeout);\n                    }\n                    delete this.requestReplyCallbacks[headers[\"ResponseMessageId\"]];\n                }\n            }\n        }\n        return promise;\n    }\n\n    /**\n     * Returns a reply function to be used by handlers.  The reply function will set the ResponseMessageId in the\n     * headers and send the reply back to the source address.\n     * @param {Object} headers\n     * @return {function(*=, *=)}\n     * @private\n     */\n    _getReplyCallback(headers) {\n        return (type, message) => {\n            headers[\"ResponseMessageId\"] = headers[\"RequestMessageId\"];\n            this.send(headers[\"SourceAddress\"], type, message, headers);\n        }\n    }\n\n    /**\n     * Disposes of Bus resources.\n     */\n    close(){\n        this.client.close();\n    }\n}\n"]}